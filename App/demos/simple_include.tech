#include "simple_include_header.tech"

/////////////
// SHADERS //
/////////////

shader vert vs_simple {
	#version 440
	
	uniform mat4 g_view;
	uniform mat4 g_proj;
	
	// vertex input as specified by 'in_vert'
	layout(location = 0) in vec4 in_pos;
	layout(location = 1) in vec4 in_col;

	// vertex shader output
	layout(location = 0) out vec4 vs_col;
	
	void main ()
	{
		gl_Position = g_proj * g_view * in_pos;
		vs_col = in_col;
	}
}

shader frag fs_simple {
	#version 440
	
	layout(location = 0) in vec4 gs_col;
	out vec4 color;
	
	void main ()
	{
		color = gs_col;
	}
}

/////////////
// PROGRAM //
/////////////

pass pass_render {
	// attach shaders
	vert vs_simple
	frag fs_simple
	
	// set clear color
	ClearColor 0.1 0.3 1.0 0.0
	// clear color and depth buffer
	Clear ColorDepthBit
	// enable depth buffer test
	Enable depthTest
	
	// execute camera code
	exec cs_util util.SimpleCamera 60 0.1 100 0 0 5
	
	// draw cube
	// draw <indexbuffername=0> <vertinname> <indextype> <primitivetype>
	//      <indexcount> <baseindex=0> <instancecount=0> <baseinstance=0> <basevertex=0>
	draw buff_idx in_vert ushort triangles 36
}

tech tech_simple {
	pass pass_render
}