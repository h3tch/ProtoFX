// custurm clipping test

// global variables
#global MAX_CAMS 4

csharp cs {
	file "<csharp>/StaticCamera.cs" ...
	     "<csharp>/SimpleCamera.cs" ...
	     "<csharp>/UniformBlock.cs" ...
	     "<csharp>/CsObject.cs" ...
	     "<csharp>/Converter.cs"
}

//////////////////
// DATA OBJECTS //
//////////////////

// DRAW INFORMATION

buffer draw_calls {
	usage staticDraw
	xml "scene.xml" data/drawcall
}

// CAMERA INFORMATION

buffer camera_transform {
	usage staticDraw
	xml "scene.xml" ...
		data/camera/position ...
		data/camera/rotation ...
		data/camera/projection
	class cs data.Converter Convert2ViewProjMatrix
}

buffer camera_viewport {
	usage staticDraw
	xml "scene.xml" data/camera/viewport
}

buffer camera_position {
	usage staticDraw
	xml "scene.xml" data/camera/position
}

// OBJECT INFORMATION

buffer object_transform {
	usage staticDraw
	xml "scene.xml"  ...
		data/object/position ...
		data/object/rotation ...
		data/object/scale
	class cs data.Converter Convert2ModelMatrix
}

buffer object_cameraid {
	usage staticDraw
	xml "scene.xml" data/object/cameraid
}

// VERTEX INFORMATION

buffer mesh_position {
	usage staticDraw
	xml "scene.xml" data/mesh/position
}

buffer mesh_normal {
	usage staticDraw
	xml "scene.xml" data/mesh/normal
}

buffer mesh_color {
	usage staticDraw
	xml "scene.xml" data/mesh/color
}

buffer mesh_triangles {
	usage staticDraw
	xml "scene.xml" data/mesh/triangles
}

// RENDER BUFFERS

image img_depth {
	width 1024
	height 1024
	format depth32f
}

/////////////////////////
// DATA FORMAT OBJECTS //
/////////////////////////

vertinput vertex_input {
	attr mesh_position float 4
	attr mesh_normal float 4
	attr mesh_color float 4
	attr object_transform float 4 48 0 1
	attr object_transform float 4 48 16 1
	attr object_transform float 4 48 32 1
	attr object_cameraid int 4 16 0 1
}

texture camera_transform_texture {
	buff camera_transform
	format RGBA32f
}

texture camera_viewport_texture {
	buff camera_viewport
	format RGBA32f
}

texture camera_position_texture {
	buff camera_position
	format RGBA32f
}

texture depth_texture {
	img img_depth
}

fragoutput fragout_shadowmap {
	depth img_depth
}

//////////////
// CONTROLS //
//////////////

instance cs_camera {
	class cs csharp.SimpleCamera
	name SimpleCamera
	pos -5 4 10
	rot -20 -15 0
}

/////////////
// SHADERS //
/////////////

// Simple GLSL vertex shader transforming
// vertex positions from model to perspective space
shader vert vs_shadowmap {
	#version 450
	
	layout(binding = 0) uniform samplerBuffer camTransform;
	layout(binding = 1) uniform samplerBuffer camViewport;
	
	// vertex input as specified by 'in_vert'
	layout(location = 0) in vec4 position;
	layout(location = 3) in vec4 axisx;
	layout(location = 4) in vec4 axisy;
	layout(location = 5) in vec4 axisz;
	layout(location = 6) in ivec4 camera[(MAX_CAMS+3)/4];

	// vertex shader output
	layout(location = 0) out vec4 pos[MAX_CAMS];
	layout(location = MAX_CAMS) out vec4 vp[MAX_CAMS];
	
	void main ()
	{
		int count;
		mat4 viewProj[MAX_CAMS];
		
		// create model matrix
		mat4 model = mat4(axisx, axisy, axisz, vec4(0,0,0,1));
		
		// create view matrix for every camera
		for (count = 0; count < MAX_CAMS && camera[count / 4][count % 4] >= 0; count++)
		{
			int ptr = camera[count / 4][count % 4];
			vp[count] = texelFetch(camViewport, ptr);
			ptr *= 4;
			viewProj[count] = mat4(
				texelFetch(camTransform, ptr + 0),
				texelFetch(camTransform, ptr + 1),
				texelFetch(camTransform, ptr + 2),
				texelFetch(camTransform, ptr + 3));
		}
		
		// pass varyings on to next shader
		for (int i = count; i < MAX_CAMS; i++)
			pos[i] = vp[i] = vec4(0);
		
		// compute model view projection position
		vec4 world = position * model;
		for (int i = 0; i < count; i++)
			pos[i] = viewProj[i] * world;
	}
}

shader geom gs_shadowmap {
	#version 450
	
	layout(triangles) in;
	layout(location = 0) in vec4 position[][MAX_CAMS];
	layout(location = MAX_CAMS) in vec4 viewport[][MAX_CAMS];
	
	layout(triangle_strip, max_vertices = 3*MAX_CAMS) out;
	
	void main ()
	{
		// for each camera
		for (int c = 0; c < MAX_CAMS && position[0][c].w != 0; c++)
		{
			// for each vertex in the triangle
			for (int v = 0; v < gl_in.length(); v++)
			{
				vec4 pos = position[v][c];
				vec4 vp = viewport[v][c];
				
				// viewport clipping
				gl_ClipDistance[0] = pos.w - pos.x;
				gl_ClipDistance[1] = pos.x + pos.w;
				gl_ClipDistance[2] = pos.w - pos.y;
				gl_ClipDistance[3] = pos.y + pos.w;
				
				// viewport transform
				pos.xy /= pos.w;
				pos.xy = pos.xy * 0.5 + 0.5;
				pos.xy = pos.xy * vp.zw + vp.xy;
				pos.xy = pos.xy * 2.0 - 1.0;
				pos.xy *= pos.w;
				
				// geomitry shader output
				gl_Position = pos;
				EmitVertex();
			}
			EndPrimitive();
		}
	}
}

shader vert vs_render {
	#version 450
	
	layout(binding = 0) uniform SimpleCamera {
		mat4 viewProj;
		vec4 position;
	} viewer;
	
	layout(binding = 0) uniform samplerBuffer camTransform;
	layout(binding = 1) uniform samplerBuffer camViewport;
	layout(binding = 2) uniform samplerBuffer camPosition;
	
	// vertex input as specified by 'in_vert'
	layout(location = 0) in vec4 position;
	layout(location = 1) in vec4 normal;
	layout(location = 2) in vec4 color;
	layout(location = 3) in vec4 axisx;
	layout(location = 4) in vec4 axisy;
	layout(location = 5) in vec4 axisz;
	layout(location = 6) in ivec4 camera[(MAX_CAMS+3)/4];

	// vertex shader output
	layout(location = 0) out vec4 nor;
	layout(location = 1) out vec4 col;
	layout(location = 2) out vec4 V;
	layout(location = 3) out vec4 L[MAX_CAMS];
	layout(location = 3+MAX_CAMS) out vec4 pos[MAX_CAMS];
	layout(location = 3+2*MAX_CAMS) out vec4 vp[MAX_CAMS];
	
	void main ()
	{
		int count;
		mat4 viewProj[MAX_CAMS];
		
		// create model matrix
		const mat4 model = mat4(axisx, axisy, axisz, vec4(0,0,0,1));
		
		// create view matrix for every camera
		for (count = 0;
		     count < MAX_CAMS && camera[count / 4][count % 4] >= 0;
		     count++)
		{
			int ptr = camera[count / 4][count % 4];
			vp[count] = texelFetch(camViewport, ptr);
			L[count] = texelFetch(camPosition, ptr);
			ptr *= 4;
			viewProj[count] = mat4(
				texelFetch(camTransform, ptr + 0),
				texelFetch(camTransform, ptr + 1),
				texelFetch(camTransform, ptr + 2),
				texelFetch(camTransform, ptr + 3));
		}
		
		// pass varyings on to next shader
		for (int i = count; i < MAX_CAMS; i++)
			pos[i] = vp[i] = L[i] = vec4(0);
			
		col = color;
		
		const vec3 scale = vec3(length(axisx.xyz), length(axisy.xyz), length(axisz.xyz));
		const mat3 modelRot = mat3(axisx.xyz / scale.x, axisy.xyz / scale.y, axisz.xyz / scale.z);
		nor = vec4((normal.xyz / scale.xyz) * modelRot, normal.w);
		
		const vec4 world = position * model;
		V = <<viewer.position>> - world;
		
		gl_Position = viewer.viewProj * world;
		
		// compute model view projection position
		for (int i = 0; i < count; i++)
		{
			pos[i] = viewProj[i] * world;
			L[i] -= world;
		}
	}
}

shader frag fs_render {
	#version 450
	
	layout(binding = 3) uniform sampler2D shadowAtlas;
	
	// fragment shader input (see col in vs_simple)
	layout(early_fragment_tests) in;
	layout(location = 0) in vec4 normal;
	layout(location = 1) in vec4 color;
	layout(location = 2) in vec4 V;
	layout(location = 3) in vec4 L[MAX_CAMS];
	layout(location = 3+MAX_CAMS) in vec4 position[MAX_CAMS];
	layout(location = 3+2*MAX_CAMS) in vec4 viewport[MAX_CAMS];
	
	// fragment color output
	out vec4 col;
	
	void main ()
	{
		// pass color
		col = vec4(0);
		const vec3 v = normalize(V.xyz);
		const vec3 n = normalize(normal.xyz);
		
		for (int i = 0; i < MAX_CAMS && position[i].w != 0; i++)
		{
			// if pixel outside light frustum clip space, do nothing
			if (any(greaterThan(abs(position[i].xyz), position[i].www)))
				continue;
				
			vec3 lpos = (position[i].xyz / position[i].w) * 0.5 + 0.5;
			lpos.xy = lpos.xy * viewport[i].zw + viewport[i].xy;
				
			if (lpos.z < texture(shadowAtlas, lpos.xy).x)
			{
				vec3 l = normalize(L[i].xyz);
				const float Id = max(0, dot(l, n));
				const float Is = max(0, pow(dot(normalize(l + v), n), 32));
				col += color * (Id + Is);
			}
		}
	}
}

/////////////////
// RENDER PASS //
/////////////////

pass pass_init {
	tex camera_transform_texture 0
	tex camera_viewport_texture 1
	tex camera_position_texture 2
	tex depth_texture 3
	glClearColor 0.1 0.3 1.0 0.0
	glEnable depthTest
	glEnable cullFace
}

pass pass_shadowmap {
	// ATTATCH SHADERS
	vert vs_shadowmap
	geom gs_shadowmap
	
	// RENDER TARGET
	fragout fragout_shadowmap
	
	// OPENGL FUNCTIONS
	glClear DepthBit
	glEnable clipDistance0
	glEnable clipDistance1
	glEnable clipDistance2
	glEnable clipDistance3
	glFrontFace CW
	
	// DRAW CALLS
	draw mesh_triangles vertex_input ushort triangles draw_calls 0 2
}

pass pass_render {
	// ATTATCH SHADERS
	vert vs_render
	frag fs_render
	
	// OPENGL FUNCTIONS
	glClear ColorDepthBit
	glDisable clipDistance0
	glDisable clipDistance1
	glDisable clipDistance2
	glDisable clipDistance3
	glFrontFace CCW
	
	// DRAW CALLS
	draw mesh_triangles vertex_input ushort triangles draw_calls 0 2
	
	exec cs_camera
}

pass pass_uninit {
	tex 0
	tex 1
	tex 2
	glClearColor 0.0 0.0 0.0 0.0
	glDisable depthTest
	glDisable cullFace
}

///////////////
// TECHNIQUE //
///////////////

// Combine passes into a single technique.
// In this case we only have one pass.
tech tech_simple {
	init pass_init
	pass pass_shadowmap
	pass pass_render
	uninit pass_uninit
}