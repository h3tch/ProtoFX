// custurm clipping test

// Simple GLSL vertex shader transforming
// vertex positions from model to perspective space
shader vert vs_simple {
	#version 450
	
	// shader variable which will be set by "SimpleCamera.cs"
	// (only uniform variables can be accessed outside the shader)
	layout(binding = 0) uniform SimpleCamera {
		mat4 viewProj;
	} camera;
	
	// vertex input as specified by 'in_vert'
	layout(location = 0) in vec4 in_pos;
	layout(location = 1) in vec4 in_col;

	// vertex shader output
	layout(location = 0) out vec4 vs_col;
	
	void main ()
	{
		<<<gl_Position>>> = <<<camera.viewProj>>> * <<<in_pos>>>;
		vs_col = <<<in_col>>>;
	}
}

//////////////////
// DATA OBJECTS //
//////////////////

// DRAW INFORMATION

buffer draw_calls {
	usage staticDraw
	xml "scene.xml" data/draw/indirect
}

// OBJECT INFORMATION

buffer obj_pos {
	usage staticDraw
	xml "scene.xml" data/object/position
}

buffer obj_rot {
	usage staticDraw
	xml "scene.xml" data/object/rotation
}

buffer obj_sca {
	usage staticDraw
	xml "scene.xml" data/object/scale
}

// VERTEX INFORMATION

buffer vert_pos {
	usage staticDraw
	xml "scene.xml" data/vertex/position
}

buffer vert_col {
	usage staticDraw
	xml "scene.xml" data/vertex/color
}

buffer vert_idx {
	usage staticDraw
	xml "scene.xml" data/vertex/index
}

/////////////////////////
// DATA FORMAT OBJECTS //
/////////////////////////

vertinput in_vert {
	attr obj_pos float 4 0 0 1
	attr obj_rot float 4 0 0 1
	attr obj_sca float 4 0 0 1
	attr vert_pos float 4
	attr vert_idx float 4
}

/////////////
// SHADERS //
/////////////

// Simple GLSL vertex shader transforming
// vertex positions from model to perspective space
shader vert vs_simple {
	#version 450
	
	// shader variable which will be set by "SimpleCamera.cs"
	// (only uniform variables can be accessed outside the shader)
	layout(binding = 0) uniform SimpleCamera {
		mat4 viewProj;
	} camera;
	
	// vertex input as specified by 'in_vert'
	layout(location = 0) in vec4 in_pos;
	layout(location = 1) in vec4 in_col;

	// vertex shader output
	layout(location = 0) out vec4 vs_col;
	
	void main ()
	{
		<<<gl_Position>>> = <<<camera.viewProj>>> * <<<in_pos>>>;
		vs_col = <<<in_col>>>;
	}
}

shader geom gs_simple {
	#version 450
	
	
}

// Simple GLSL fragment shader writing
// the color of the fragment to the framebuffer
shader frag fs_simple {
	#version 450
	
	// fragment shader input (see vs_col in vs_simple)
	layout(location = 0) in vec4 gs_col;
	
	// fragment color output
	out vec4 color;
	
	void main ()
	{
		color = <<<gs_col>>>;
	}
}

//////////////
// CONTROLS //
//////////////

// Include C# code to allow
// for simple camera controls
csharp cs_util {
	// Compile C# file "SimpleCamera.cs"
	file "<csharp>/StaticCamera.cs" ...
	     "<csharp>/SimpleCamera.cs" ...
	     "<csharp>/UniformBlock.cs"
}

instance cs_camera {
	class cs_util csharp.SimpleCamera
	name SimpleCamera
	pos -5 4 10
	rot -20 -15 0
}

/////////////////
// RENDER PASS //
/////////////////

// Define a rendering pass
pass pass_render {
	// ATTATCH SHADERS
	vert vs_simple
	frag fs_simple
	
	// OPENGL FUNCTIONS
	// set clear color
	ClearColor 0.1 0.3 1.0 0.0
	// clear color and depth buffer
	Clear ColorDepthBit
	// enable depth buffer test
	Enable depthTest
	
	// EXECUTE CONTROL
	// execute camera code (sets g_viewproj in vs_simple)
	exec cs_camera
	
	// DRAW CALLS
	// buff_idx .... name of the ellement array buffer
	//               containing triangle indices
	// in_vert ..... name of the vertex input object defining
	//               how vertex data should be accessed
	// ushort ...... the format of the indices stored in buff_idx
	// triangles ... the primitive type stored in buff_idx
	//               (in this case a triangle list)
	// 0 ........... the fisrt vertex to use is vertex 0
	// 0 ........... the first index of 'buff_idx' to use is 0
	// 36 .......... use 36 indices in 'buff_idx'
	//               (= 36/3 = 12 triangles)
	draw buf_idx in_vert ushort triangles 0 0 36
}

///////////////
// TECHNIQUE //
///////////////

// Combine passes into a single technique.
// In this case we only have one pass.
tech tech_simple {
	// First pass
	pass pass_render
}