#global RESOLUTION 2048
#global PI 3.14159265359
#global MAX_POISSON_POINTS 256

csharp cs_quest {
	assembly "Interop.MLApp.dll"
	file "<csharp>/ArtifactQuest.cs" ......
	     "<csharp>/PoissonDisc.cs" ...
	     "<csharp>/UniformBlock.cs" ...
	     "<csharp>/CsObject.cs" ...
	     "<csharp>/Converter.cs"
}

instance inst_quest {
	class cs_quest csharp.ArtifactQuest
	name QuestSetup
}

// FULL SCREEN QUAD
text xml_quad {
	<?xml version='1.0'?>
	<data>
		<position type='float' isbinary='false'>
			-1.0 -1.0  0.0  1.0
			 1.0 -1.0  0.0  1.0
			 1.0  1.0  0.0  1.0
			-1.0  1.0  0.0  1.0
			-1.0 -1.0  0.0  1.0
			 1.0 -1.0  0.0  1.0
			 1.0  1.0  0.0  1.0
			-1.0  1.0  0.0  1.0
		</position>
		<index type='ushort' isbinary='false'>
			0  1  2
			2  3  0
		</index>
	</data>
}

buffer buf_pos {
	usage staticDraw
	xml xml_quad data/position
}

buffer buf_idx {
	usage staticDraw
	xml xml_quad data/index
}

vertinput in_vert {
	attr buf_pos float 4
}

image img_artifact {
	size RESOLUTION RESOLUTION
	format r32f
}

sampler samp_linear {
	minfilter linear
	magfilter linear
}

texture tex_artifact {
	img img_artifact
}

fragoutput out_artifact {
	color img_artifact
}

shader vert vs_shader {
	#version 450
	
	layout(location = 0) in vec4 position;
	
	void main() {
		gl_Position = position;
	}
}

shader frag fs_artifact {
	#version 450
	
	layout(binding = 0, std140) uniform QuestSetup {
		layout(offset =  0) ivec2 rendertargetSize;
		layout(offset =  8) ivec2 framebufferSize;
		layout(offset = 16) float lineAngle;
		layout(offset = 20) float randomAngle;
		layout(offset = 24) float artifactSize;
		layout(offset = 28) float filterRadius;
	} setup;
	
	layout(binding = 1) uniform QuestSetupDisc {
		int nPoints;
		vec2 points[MAX_POISSON_POINTS];
	} disc;
	
	layout(pixel_center_integer) in vec4 gl_FragCoord;
	
	out float color;
	
	float rand(vec2 xy) {
		return fract(sin(dot(xy, vec2(12.9898,78.233))) * 43758.5453);
	}

	mat2 randRot(float angle) {
		float sa = sin(angle);
		float ca = cos(angle);
		return mat2(ca, -sa, sa, ca);
	}
	
	// returns the positive root of intersection of line y = h
	// with circle centered at the origin and radius r
	float section(float h, float r) {
		return (h < r) ? sqrt(max(0, r * r - h * h)) : 0;
	}

	// indefinite integral of circle segment
	float circleSegIntegral(float x, float h, float r) {
		return 0.5 * (sqrt(max(0,1 - x * x / (r * r))) * x * r + r * r * asin(clamp(x / r, -1, 1)) - 2 * h * x);
	}
	
	float areaHorizontal(vec2 x, float h, float r) {
		// this must be sorted otherwise we get a negative area
		float s = section(h, r);
		x = clamp(x, -s, s);
		// integrate the area
		return circleSegIntegral(x.y, h, r) - circleSegIntegral(x.x, h, r);
	}

	float areaVertical(vec2 x, vec2 y, float r) {
		// area of the lower box minus area of the higher box
		return areaHorizontal(x, y.x, r) - areaHorizontal(x, y.y, r);
	}
	
	float areaRectCircle(vec2 x, vec2 y, float r) {
		if(y.x < 0) {
			if(y.y < 0)
				// the box is completely under, just flip it above and try again
				y = -y.yx;
			else
				// the box is both above and below, divide it to two boxes and go again
				return areaVertical(x, vec2(0, -y.x), r) + areaVertical(x, vec2(0, y.y), r);
		} 
		// area of the lower box minus area of the higher box
		return areaVertical(x, y, r);
	}
	
	void main() {
		if (disc.nPoints == 0) {
			float <<d>> = tan(setup.lineAngle);
			vec2 C = (gl_FragCoord.xy - setup.rendertargetSize.xy / 2) / setup.artifactSize;
			float r = setup.filterRadius / setup.artifactSize;
			
			float areaRect = 0;
			
			for (int a = int(C.x - r) - 1, b = int(C.x + r); a <= b; a++) {
				vec2 x = vec2(float(a), float(a+1));
				vec2 <<y>> = vec2(-setup.rendertargetSize.y, floor(x.x * d));
				areaRect += areaRectCircle(x - C.xx, y - C.yy, r);
			}
			
			float areaCircle = r * r * PI;
			color = areaRect / areaCircle;
		}
		else
		{
			vec2 <<lineN>> = vec2(-sin(setup.lineAngle), cos(setup.lineAngle));
			vec2 <<C>> = (gl_FragCoord.xy - setup.rendertargetSize.xy / 2) / setup.artifactSize;
			float r = setup.filterRadius / setup.artifactSize;
			mat2 R = randRot(2 * PI * rand(C.xy));
			
			int i;
			float count = 0;
			for (i = 0; i < disc.nPoints; i++) {
				vec2 <<c>> = floor(C + R * disc.points[i] * r);
				count += max(0, -sign(dot(lineN, c)));
			}
			
			color = <<count>> / float(<<i>>);
		}
	}
}

shader frag fs_render {
	#version 450
	
	layout(binding = 0, std140) uniform QuestSetup {
		layout(offset =  0) ivec2 rendertargetSize;
		layout(offset =  8) ivec2 framebufferSize;
		layout(offset = 16) float lineAngle;
		layout(offset = 20) float randomAngle;
		layout(offset = 24) float artifactSize;
		layout(offset = 28) float filterRadius;
	} setup;
	
	layout(binding = 0) uniform sampler2D filteredArtifacts;
	
	layout(pixel_center_integer) in vec4 gl_FragCoord;
	
	out vec4 color;
	
	void main() {
		mat2 M = mat2(vec2( cos(setup.randomAngle), sin(setup.randomAngle)),
		              vec2(-sin(setup.randomAngle), cos(setup.randomAngle)));
		vec2 coord = gl_FragCoord.xy / setup.framebufferSize - 0.5;
		coord = (coord * setup.framebufferSize / textureSize(filteredArtifacts, 0 )) * M + 0.5;
		color = texture(filteredArtifacts, coord).xxxx;
	}
}

pass pass_artifact {
	vert vs_shader
	frag fs_artifact
	fragout out_artifact
	
	tex 0
	samp 0
	
	glClear ColorBit
	
	draw buf_idx in_vert ushort triangles 0 0 6
	
	exec inst_quest
}

pass pass_render {
	vert vs_shader
	frag fs_render
	
	tex tex_artifact 0
	samp samp_linear 0
	
	glClear ColorBit
	
	draw buf_idx in_vert ushort triangles 0 0 6
}

tech tech_quest {
	pass pass_artifact
	pass pass_render
}