// ==========================
// TUTORIAL: Colored Triangle
// AUTHOR: Michael Hecher
// ==========================

//////////////////
// DATA OBJECTS //
//////////////////

buffer buf_pos {
	usage staticDraw
	xml "../geom/triangle.xml" data/position
}

buffer buf_col {
	usage staticDraw
	xml "../geom/triangle.xml" data/color
}

buffer buf_idx {
	usage staticDraw
	xml "../geom/triangle.xml" data/index
}

/////////////////////////
// DATA FORMAT OBJECTS //
/////////////////////////

vertinput in_vert {
	attr buf_pos float 4
	// We now have a second input buffer for the shaders.
	attr buf_col float 4
}

/////////////
// SHADERS //
/////////////

shader vs_simple vert {
	#version 440
	
	layout(location = 0) in vec4 in_pos;
	// We have an additional input stream for
	// vertex colors at attribute location 1.
	layout(location = 1) in vec4 in_col;
	
	// We also need to pass the vertex color to the fragment
	// shader. The output location musst match the input
	// location of the fragment shader.
	layout(location = 0) out vec4 out_col;
	
	out gl_PerVertex {
		vec4 gl_Position;
	};
	
	void main () {
		gl_Position = in_pos;
		out_col = in_col;
	}
}

shader fs_simple frag {
	#version 440
	
	// We have an additional input for vertex colors.
	layout(location = 0) in vec4 in_col;
	
	layout(location = 0) out vec4 color;
	
	void main () {
		color = in_col;
	}
}

/////////////////
// RENDER PASS //
/////////////////

pass pass_render {
	vert vs_simple
	frag fs_simple
	glDisable depthTest
	draw buf_idx in_vert ushort triangles 0 0 3
}

pass pass_reset {
}

///////////////
// TECHNIQUE //
///////////////

tech tech_simple {
	pass pass_render
	pass pass_reset
}