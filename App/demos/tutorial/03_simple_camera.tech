// ==========================
// TUTORIAL: Colored Triangle
// AUTHOR: Michael Hecher
// ==========================
//
// In this tutorial we will add a camera control class to the
// ProtoGL program to navigate the scene and set shader uniforms.

/////////////////////
// DEFINE GEOMETRY //
/////////////////////

text xml_cube {
	<?xml version='1.0'?>
	<data>
		<position type='float' isbinary='false'>
			-1.0 -1.0  1.0  1.0
			1.0 -1.0  1.0  1.0
			1.0  1.0  1.0  1.0
			-1.0  1.0  1.0  1.0
			-1.0 -1.0 -1.0  1.0
			1.0 -1.0 -1.0  1.0
			1.0  1.0 -1.0  1.0
			-1.0  1.0 -1.0  1.0
		</position>
		<color type='float' isbinary='false'>
			1.0  0.0  0.0  1.0
			0.0  1.0  0.0  1.0
			0.0  0.0  1.0  1.0
			1.0  1.0  1.0  1.0
			1.0  0.0  0.0  1.0
			0.0  1.0  0.0  1.0
			0.0  0.0  1.0  1.0
			1.0  1.0  1.0  1.0
		</color>
		<index type='ushort' isbinary='false'>
			0  1  2
			2  3  0
			3  2  6
			6  7  3
			7  6  5
			5  4  7
			4  5  1
			1  0  4
			4  0  3
			3  7  4
			1  5  6
			6  2  1
		</index>
	</data>
}

//////////////////
// DATA OBJECTS //
//////////////////

buffer buf_pos {
	usage staticDraw
	xml xml_cube data/position
}

buffer buf_col {
	usage staticDraw
	xml xml_cube data/color
}

buffer buf_idx {
	usage staticDraw
	xml xml_cube data/index
}

/////////////////////////
// DATA FORMAT OBJECTS //
/////////////////////////

vertinput in_vert {
	attr buf_pos float 4
	attr buf_col float 4
}

/////////////
// SHADERS //
/////////////

shader vert vs_simple {
	#version 440
	
	// Shader variable set by "SimpleCamera.cs" (only
	// uniforms can be accessed outside the shader).
	layout(binding = 0) uniform SimpleCamera {
		mat4 viewProj;
	} camera;
	
	layout(location = 0) in vec4 in_pos;
	layout(location = 1) in vec4 in_col;
	
	layout(location = 0) out vec4 out_col;
	
	void main () {
		gl_Position = camera.viewProj * in_pos;
		out_col = in_col;
	}
}

shader frag fs_simple {
	#version 440
	
	layout(location = 0) in vec4 in_col;
	
	layout(location = 0) out vec4 color;
	
	void main () {
		color = in_col;
	}
}

//////////////
// CONTROLS //
//////////////

// Include C# code
csharp cs_util {
	// Compile C# file "SimpleCamera.cs" to add class
	// csharp.SimpleCamera (multiple files can be listed).
	file "<csharp>/StaticCamera.cs" ...
	     "<csharp>/SimpleCamera.cs" ...
	     "<csharp>/UniformBlock.cs" ...
	     "<csharp>/CsObject.cs"
}

instance cs_camera {
	class cs_util csharp.SimpleCamera
	name SimpleCamera
	pos 0 0 5
}

/////////////////
// RENDER PASS //
/////////////////

pass pass_render {
	vert vs_simple
	frag fs_simple

	// Draw the cube mesh. Note that draw commands
	// will be executed after OpenGL states were set.
	draw buf_idx in_vert ushort triangles 0 0 36
	
	// SET OPENGL STATES
	// Note: OpenGL states are set before draw calls are executed.

	// Clear color and depth framebuffer.
	Clear ColorDepthBit
	
	// Enable depth buffer test. This is necessary to draw the
	// cube correctly. You can try to turn this test off.
	Enable depthTest
	
	// Execute camera code (sets g_viewproj in vs_simple).
	// You can control the camera with the left (rotate)
	// and right (move) mouse buttons and mouse movement.
	exec cs_camera
}

pass pass_reset {
	Disable depthTest
}

///////////////
// TECHNIQUE //
///////////////

tech tech_simple {
	pass pass_render
	pass pass_reset
}