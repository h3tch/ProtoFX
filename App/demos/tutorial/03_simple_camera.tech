// ==========================
// TUTORIAL: Colored Triangle
// AUTHOR: Michael Hecher
// ==========================

//////////////////
// DATA OBJECTS //
//////////////////

buffer buf_pos {
	usage staticDraw
	file "../geom/cube.xml|position"
}

buffer buf_col {
	usage staticDraw
	file "../geom/cube.xml|color"
}

buffer buf_idx {
	usage staticDraw
	file "../geom/cube.xml|index"
}

/////////////////////////
// DATA FORMAT OBJECTS //
/////////////////////////

vertinput in_vert {
	attr buf_pos float 4
	attr buf_col float 4
}

/////////////
// SHADERS //
/////////////

shader vert vs_simple {
	#version 440
	
	// shader variable which will be set by "SimpleCamera.cs"
	// (only uniform variables can be accessed outside the shader)
	uniform mat4 g_viewproj;
	
	layout(location = 0) in vec4 in_pos;
	layout(location = 1) in vec4 in_col;
	
	layout(location = 0) out vec4 out_col;
	
	void main () {
		gl_Position = g_viewproj * in_pos;
		out_col = in_col;
	}
}

shader frag fs_simple {
	#version 440
	
	layout(location = 0) in vec4 in_col;
	
	layout(location = 0) out vec4 color;
	
	void main () {
		color = in_col;
	}
}

//////////////
// CONTROLS //
//////////////

// Include C# code to allow
// for simple camera controls
csharp cs_util {
	// Compile C# file "SimpleCamera.cs"
	file "../util/SimpleCamera.cs"
}

/////////////////
// RENDER PASS //
/////////////////

pass pass_render {
	vert vs_simple
	frag fs_simple
	
	// clear color and depth buffer
	Clear ColorDepthBit
	
	// enable depth buffer test
	Enable depthTest
	
	// Execute camera code (sets g_viewproj in vs_simple).
	// You can control the camera with the left (rotate)
	// and right (move) mouse buttons and mouse movement.
	exec cs_util util.SimpleCamera 60 0.1 100 3 2 5 -20 30
	
	// draw triangle
	draw buf_idx in_vert ushort triangles 0 0 36
}

pass pass_reset {
	Disable depthTest
}

///////////////
// TECHNIQUE //
///////////////

tech tech_simple {
	pass pass_render
	pass pass_reset
}