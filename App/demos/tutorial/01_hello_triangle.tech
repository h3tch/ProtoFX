// AUTHOR: Michael Hecher

//////////////////
// DATA OBJECTS //
//////////////////

// Vertex positions
buffer buf_pos {
	// we will only read the data
	usage staticDraw
	// load data <position> from cube.xml
	file "../geom/triangle.xml|position"
}

// Triangle list defining the mesh
buffer buf_idx {
	usage staticDraw
	// load data <index> from cube.xml
	file "../geom/triangle.xml|index"
}

/////////////////////////
// DATA FORMAT OBJECTS //
/////////////////////////

// Define how to access vertex data from shaders
vertinput in_vert {
	// bind vertex position buffer to attribute
	// location 0 (see in_pos in vs_simple)
	attr buf_pos float 4
}

/////////////
// SHADERS //
/////////////

// Simple GLSL vertex shader transforming
// vertex positions from model to perspective space
shader vert vs_simple {
	#version 440
	
	// vertex input as specified by 'in_vert'
	layout(location = 0) in vec4 in_pos;
	
	void main () {
		gl_Position = in_pos;
	}
}

// Simple GLSL fragment shader writing
// the color of the fragment to the framebuffer
shader frag fs_simple {
	#version 440
	
	// fragment color output
	out vec4 color;
	
	void main () {
		color = vec4(1.0);
	}
}

/////////////////
// RENDER PASS //
/////////////////

// Define a rendering pass
pass pass_render {
	// ATTATCH SHADERS
	vert vs_simple
	frag fs_simple
	
	// OPENGL FUNCTIONS
	// set clear color
	ClearColor 0.1 0.3 1.0 0.0
	// clear color and depth buffer
	Clear ColorDepthBit
	// enable depth buffer test
	Enable depthTest
	
	// DRAW CALLS
	// buff_idx .... name of the ellement array buffer
	//               containing triangle indices
	// in_vert ..... name of the vertex input object defining
	//               how vertex data should be accessed
	// ushort ...... the format of the indices stored in buff_idx
	// triangles ... the primitive type stored in buff_idx
	//               (in this case a triangle list)
	// 0 ........... the fisrt vertex to use is vertex 0
	// 0 ........... the first index of 'buff_idx' to use is 0
	// 3 ........... use 3 indices in 'buff_idx' (= 3/3 = 1 triangle)
	draw buf_idx in_vert ushort triangles 0 0 3
}

///////////////
// TECHNIQUE //
///////////////

// Combine passes into a single technique.
// In this case we only have one pass.
tech tech_simple {
	// First pass
	pass pass_render
}