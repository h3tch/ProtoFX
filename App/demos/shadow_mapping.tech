// AUTHOR: Michael Hecher

/////////////
// BUFFERS //
/////////////

buffer buff_pos {
	// buffer will only be used for reading
	// and will not be updated during runtime
	usage staticDraw
	// load <pos></pos> data from XML file
	// these are vertex positions for each vertex
	file "geom/cube.xml|position"
}

buffer buff_color {
	usage staticDraw
	file "geom/cube.xml|color"
}

buffer buf_idx {
	usage staticDraw
	file "geom/cube.xml|index"
}

image img_shadowmap {
	// image size in pixels
	width 1024
	height 1024
	// pixel format is a 32
	// bit floating point depth
	format depth32f
}

/////////////////////
// BUFFER BINDINGS //
/////////////////////

vertinput in_vert {
	// first attribute: floating point
	// vertex positions (x,y,z,1)
	attr buff_pos float 4
	// second attribute: floating point
	// vertex colors (x,y,z,1)
	attr buff_color float 4
}

sampler samp_linear {
	minfilter linear
	magfilter linear
}

fragoutput out_shadowmap {
	// depth attachment
	depth img_shadowmap
}

/////////////
// SHADERS //
/////////////

shader vert vs_shadowmap {
	#version 440
	
	uniform mat4 g_viewproj;
	
	// vertex input as specified by 'in_vert'
	layout(location = 0) in vec4 in_pos;
	
	void main ()
	{
		gl_Position = g_viewproj * in_pos;
	}
}

shader vert vs_simple {
	#version 440
	
	uniform mat4 g_viewproj;
	
	// vertex input as specified by 'in_vert'
	layout(location = 0) in vec4 in_pos;
	layout(location = 1) in vec4 in_col;

	// vertex shader output
	layout(location = 0) out vec4 vs_col;
	
	void main ()
	{
		gl_Position = g_viewproj * in_pos;
		vs_col = in_col;
	}
}

shader frag fs_simple {
	#version 440
	
	layout(location = 0) in vec4 gs_col;
	out vec4 color;
	
	void main ()
	{
		color = gs_col;
	}
}

/////////////
// PROGRAM //
/////////////

csharp cs_util {
	file "util/SimpleCamera.cs"
}

pass pass_shadowmap {
	// attach shaders
	vert vs_shadowmap

	// render to
	fragout out_shadowmap
	
	// OpenGL calls
	Clear depthBit
	Enable depthTest

	// execute camera code
	exec cs_util util.SimpleCamera 60 0.1 100 3 4 3 -45 45
	
	// draw cube
	draw buf_idx in_vert ushort triangles 0 0 36
}

pass pass_render {
	// attach shaders
	vert vs_simple
	frag fs_simple
	
	// OpenGL calls
	ClearColor 0.1 0.3 1.0 0.0
	Clear colorDepthBit
	Enable depthTest

	// execute camera code
	exec cs_util util.SimpleCamera 60 0.1 100 -5 4 10 -20 -10
	
	// draw cube
	draw buf_idx in_vert ushort triangles 0 0 36
}

tech tech_simple {
	pass pass_shadowmap
	pass pass_render
}