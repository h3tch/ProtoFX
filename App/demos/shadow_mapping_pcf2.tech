// AUTHOR: Michael Hecher

/////////////
// BUFFERS //
/////////////

buffer buf_pos {
	usage staticDraw
	xml "geom/cube.xml" data/position
	xml "geom/plane.xml" data/position
}

buffer buf_col {
	usage staticDraw
	xml "geom/cube.xml" data/color
	xml "geom/plane.xml" data/color
}

buffer buf_idx {
	usage staticDraw
	xml "geom/cube.xml" data/index
	xml "geom/plane.xml" data/index
}

image img_shadowmap {
	size 512 512
	format depth32f
}

/////////////////////
// BUFFER BINDINGS //
/////////////////////

vertinput in_vert {
	attr buf_pos float 4
	attr buf_col float 4
}

sampler samp_linear {
	minfilter linear
	magfilter linear
}

fragoutput out_shadowmap {
	// depth attachment
	depth img_shadowmap
}

texture tex_shadowmap {
	img img_shadowmap
}

////////////////
// EXTENSIONS //
////////////////

csharp cs_util {
	file "<csharp>/StaticCamera.cs" ...
	     "<csharp>/SimpleCamera.cs" ...
	     "<csharp>/SpotLight.cs" ...
	     "<csharp>/PoissonDisc.cs" ...
	     "<csharp>/UniformBlock.cs" ...
	     "<csharp>/CsObject.cs"
}

instance cs_light {
	class cs_util camera.SpotLight
	name SpotLight
	pos 3 4 3
	rot -45 45 0
}

instance cs_camera {
	class cs_util camera.SimpleCamera
	name SimpleCamera
	pos -5 4 10
	rot -20 -15 0
}

instance cs_poisson {
	class cs_util sampling.PoissonDisc
	name PoissonDisc
	minRadius 0.3
}

/////////////
// SHADERS //
/////////////

shader vs_shadowmap vert {
	#version 440
	
	layout(binding = 0) uniform SpotLight {
		mat4 viewProj;
	} light;
	
	// vertex input as specified by 'in_vert'
	layout(location = 0) in vec4 in_pos;
	
	out gl_PerVertex {
		vec4 gl_Position;
	};
	
	void main ()
	{
		// transform vertex to light projection space
		gl_Position = light.viewProj * in_pos;
	}
}

shader vs_render vert {
	#version 440
	
	layout(binding = 0) uniform SpotLight {
		mat4 viewProj;
	} light;

	layout(binding = 1) uniform SimpleCamera {
		mat4 viewProj;
	} camera;
	
	// vertex input as specified by 'in_vert'
	layout(location = 0) in vec4 in_pos;
	layout(location = 1) in vec4 in_col;

	// vertex shader output
	layout(location = 0) out vec4 out_lpos;
	layout(location = 1) out vec4 out_col;
	out gl_PerVertex {
		vec4 gl_Position;
	};
	
	void main ()
	{
		// transform vertex to camera projection space
		gl_Position = camera.viewProj * in_pos;
		// transform vertex to light projection space
		out_lpos = light.viewProj * in_pos;
		// pass vertex color
		out_col = in_col;
	}
}

shader fs_render frag {
	#version 440
	
	const float PI = 3.1415926535897932384626433832795;
	const int numPoints = global.cs_poisson.NumPoints;

	layout(binding = 2) uniform PoissonDisc {
		vec2 points[numPoints];
	} disc;
	
	layout(binding = 0) uniform sampler2D shadowmap;
	
	layout(location = 0) in vec4 in_lpos;
	layout(location = 1) in vec4 in_col;
	out vec4 color;

	float rand(vec2 xy) {
		return fract(sin(dot(xy ,vec2(12.9898,78.233))) * 43758.5453);
	}

	mat2 randRot(float angle) {
		float sa = sin(angle);
		float ca = cos(angle);
		return mat2(ca, -sa, ca, sa);
	}

	float PCF(float filterR, vec3 lpos) {
		// PCF SHADOW MAPPING
		float shadow = 0.0;
		mat2 R = randRot(2 * PI * rand(lpos.xy));
		const float bias = 0.0005;

		for (int i = 0; i < numPoints; i++) {
			vec2 p = lpos.xy + R * disc.points[i] * filterR;
			shadow += lpos.z - bias > texture(shadowmap, p).x ? 1.0 : 0.0;
		}

		return shadow / float(numPoints);
	}
	
	void main ()
	{
		// pass color
		color = in_col;
		
		// if pixel outside light frustum clip space, do nothing
		if (any(greaterThan(abs(in_lpos), in_lpos.wwww)))
			return;
			
		// SHADOW MAPPING
		
		// transform to normalized device coordinates [-1;+1]
		// and then to shadow map texture coordinates [0;1]
		vec3 lpos = (in_lpos.xyz / in_lpos.w) * 0.5 + 0.5;
		
		const vec2 r = 10.0 / textureSize(shadowmap, 0);
		
		float shadow = PCF((r.x + r.y) * 0.5, lpos);
		if (shadow == 0.0)
			return;
		
		color.rgb *= (1.0 - shadow) * 0.5 + 0.5;
	}
}

/////////////
// PROGRAM //
/////////////

pass pass_shadowmap {
	// attach shaders
	vert vs_shadowmap

	// render to
	fragout out_shadowmap
	
	// OpenGL calls
	glClear depthBit
	glEnable depthTest
	glEnable CullFace

	// execute camera code
	exec cs_light
	
	// draw cube
	draw buf_idx in_vert ushort triangles 0 0 36
	draw buf_idx in_vert ushort triangles 8 36 6
}

pass pass_render {
	// attach shaders
	vert vs_render
	frag fs_render
	
	tex tex_shadowmap 0
	
	// OpenGL calls
	glClearColor 0.1 0.3 1.0 0.0
	glClear colorDepthBit

	// execute camera code
	exec cs_light
	exec cs_camera
	exec cs_poisson
	
	// draw cube
	draw buf_idx in_vert ushort triangles 0 0 36
	draw buf_idx in_vert ushort triangles 8 36 6
}

pass pass_reset {
	tex 0
	glClearColor 0 0 0 0
	glDisable depthTest
	glDisable CullFace
}

tech tech_simple {
	pass pass_shadowmap
	pass pass_render
	pass pass_reset
}