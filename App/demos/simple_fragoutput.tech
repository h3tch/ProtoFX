// AUTHOR: Michael Hecher

//////////////////
// DATA OBJECTS //
//////////////////

// Vertex positions
buffer buf_pos {
	// buffer will only be used for reading
	// and will not be updated during runtime
	usage staticDraw
	// load <pos></pos> data from XML file
	// these are vertex positions for each vertex
	xml "geom/cube.xml" data/position
	xml "geom/quad.xml" data/position
}

// Vertex colors
buffer buf_color {
	usage staticDraw
	// load <color></color> data from XML file
	// these are vertex colors for each vertex
	xml "geom/cube.xml" data/color
	xml "geom/quad.xml" data/color
}

// Triangle list defining the mesh
buffer buf_idx {
	usage staticDraw
	// load <index></index> data from XML file
	// these are indices forming triangles from vertex positions
	xml "geom/cube.xml" data/index
	xml "geom/quad.xml" data/index
}

// Color image (used as a render target)
image img_color {
	// image size in pixels
	width 1024
	height 768
	// pixel format is (red,green,blue,alpha)
	format RGBA8
}

// 32 bit floatingpoint depth image (used as a render target)
image img_depth {
	// image size in pixels
	width 1024
	height 768
	// pixel format is a 32 bit floating point depth
	format depth32f
}

/////////////////////////
// DATA FORMAT OBJECTS //
/////////////////////////

vertinput in_vert {
	// first attribute: floating point
	// vertex positions (x,y,z,1)
	attr buf_pos float 4
	// second attribute: floating point
	// vertex colors (x,y,z,1)
	attr buf_color float 4
}

sampler samp_linear {
	minfilter linear
	magfilter linear
}

fragoutput out_frag {
	// first color attachment is img_color
	color img_color
	// depth attachment is img_depth
	depth img_depth
}

texture tex_color {
	img img_color
}

/////////////
// SHADERS //
/////////////

shader vert vs_simple {
	#version 440
	
	layout(location = 0) uniform SimpleCamera {
		mat4 viewProj;
	} camera;
	
	// vertex input as specified by 'in_vert'
	layout(location = 0) in vec4 in_pos;
	layout(location = 1) in vec4 in_col;

	// vertex shader output
	layout(location = 0) out vec4 vs_col;
	
	void main ()
	{
		gl_Position = camera.viewProj * in_pos;
		vs_col = in_col;
	}
}

shader frag fs_simple {
	#version 440
	
	layout(location = 0) in vec4 gs_col;
	out vec4 color;
	
	void main ()
	{
		color = gs_col;
	}
}

shader vert vs_present {
	#version 440
	
	layout(location = 0) in vec4 in_pos;
	layout(location = 0) out vec2 vs_uv;
	
	void main ()
	{
		gl_Position = vec4(in_pos.xy, 0, 1);
		vs_uv = in_pos.zw;
	}
}

shader frag fs_present {
	#version 440

	layout(binding = 0) uniform sampler2D tex;
	
	layout(location = 0) in vec2 gs_uv;
	out vec4 color;
	
	void main ()
	{
		color = texture(tex, gs_uv);
	}
}

/////////////
// PROGRAM //
/////////////

csharp cs_util {
	// Compile C# file "SimpleCamera.cs"
	file "<csharp>/StaticCamera.cs" ...
	     "<csharp>/SimpleCamera.cs" ...
	     "<csharp>/UniformBlock.cs" ...
	     "<csharp>/CsObject.cs"
}

instance cs_camera {
	class cs_util csharp.SimpleCamera
	name SimpleCamera
	pos 0 0 5
}

pass pass_render {
	// attach shaders
	vert vs_simple
	frag fs_simple

	// render to
	fragout out_frag
	
	// OpenGL calls
	glClearColor 0.1 0.3 1.0 1.0
	glClear colorDepthBit
	glEnable depthTest

	// execute camera code
	exec cs_camera
	
	// draw cube
	draw buf_idx in_vert ushort triangles 0 0 36
}

pass pass_present {
	// attach shaders
	vert vs_present
	frag fs_present

	// bind shader resources
	tex tex_color 0
	samp samp_linear 0
	
	// OpenGL calls
	glDisable depthTest
	
	// draw fullscreen rectangle
	draw buf_idx in_vert ushort triangles 8 36 6
}

pass pass_reset {
	glClearColor 0.0 0.0 0.0 0.0
	tex 0
	samp 0
}

tech tech_simple {
	pass pass_render
	pass pass_present
	pass pass_reset
}