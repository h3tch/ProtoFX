<?xml version='1.0'?>
<FxLexer>
  <!-- Light Theme -->
  <Style theme='DarkTheme' name='string' fore='#D69D85'/>
  <Style theme='DarkTheme' name='operator' fore='#A0A0A0'/>
  <Style theme='DarkTheme' name='braces' fore='#606060'/>
  <Style theme='DarkTheme' name='punctuation' fore='#A0A0A0'/>
  <Style theme='DarkTheme' name='number' fore='#B5CEA8'/>
  <Style theme='DarkTheme' name='LineComment' fore='#608B4E'/>
  <Style theme='DarkTheme' name='BlockComment' fore='#82A847'/>
  <Style theme='DarkTheme' name='name' fore='#000000'/>
  <!-- Light Theme -->
  <Style theme='LightTheme' name='string' fore='#D69D85'/>
  <Style theme='LightTheme' name='operator' fore='#A0A0A0'/>
  <Style theme='LightTheme' name='braces' fore='#C0C0C0'/>
  <Style theme='LightTheme' name='punctuation' fore='#C0C0C0'/>
  <Style theme='LightTheme' name='number' fore='#90BE78'/>
  <Style theme='LightTheme' name='LineComment' fore='#608B4E'/>
  <Style theme='LightTheme' name='BlockComment' fore='#82A847'/>
  <Style theme='LightTheme' name='name' fore='#000000'/>
  <!-- TECH -->
  <Lexer type='tech' lexer='TechLexer'>
    <Style theme='DarkTheme' name='preprocessor' fore='#9B9B9B'/>
    <Style theme='DarkTheme' name='type' fore='#3C81C1'/>
    <Style theme='DarkTheme' name='anno' fore='#2FABA7'/>
    <Style theme='LightTheme' name='preprocessor' fore='#9B9B9B'/>
    <Style theme='LightTheme' name='type' fore='#3C81C1'/>
    <Style theme='LightTheme' name='anno' fore='#2FABA7'/>
    <Keyword style_name='type' name='buffer' hint='Allocate buffer on the GPU.
                                                  \  &lt;key&gt;buffer&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    <Keyword style_name='type' name='memory' hint='Allocate memory on the CPU.
                                                  \  &lt;key&gt;memory&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    <Keyword style_name='type' name='csharp' hint='Load C# assemplies.
                                                  \  &lt;key&gt;csharp&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    <Keyword style_name='type' name='fragoutput'
             hint='Fragment output object allow for the creation of
                  \user-defined framebuffers. With them, one can render
                  \to non-Default Framebuffer locations, and thus render
                  \without disturbing the main screen. The fragment
                  \shader is usually used to write to these objects.
                  \  &lt;key&gt;fragoutput&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    <Keyword style_name='type' name='image' hint='Similar to a texture, but are
                                                 \accessed by compute commands.
                                                 \  &lt;key&gt;image&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    <Keyword style_name='type' name='instance' hint='Instantiate a class from a C# assembly.
                                                    \  &lt;key&gt;instance&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    <Keyword style_name='type' name='pass' hint='Define a rendering pass.
                                                \  &lt;key&gt;pass&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    <Keyword style_name='type' name='sampler' hint='Define a sampler state.
                                                   \  &lt;key&gt;sampler&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    <Keyword style_name='type' name='shader' hint='Compile a GLSL shader. The shader_type annotation
                                                  \specifies towards which shader stage this shader
                                                  \should be compiled.
                                                  \  &lt;key&gt;shader&lt;/key&gt; &lt;param&gt;[name] [shader_type]&lt;/param&gt;'/>
    <Keyword style_name='type' name='tech' hint='Combines render basses into a rendering technique.
                                                \  &lt;key&gt;tech&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    <Keyword style_name='type' name='text' hint='A text object only defines a string
                                                \that can be used by other object.
                                                \  &lt;key&gt;text&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    <Keyword style_name='type' name='texture'
             hint='A texture contains one or more images that all have
                  \the same pixel format. A texture can be used in two
                  \ways. It can be the source of a texture access from
                  \a Shader, or it can be used as a render target. 
                  \  &lt;key&gt;texture&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    <Keyword style_name='type' name='vertinput' hint='Define a vertex input stream that can be used
                                                     \by a rendering passes to process vertex information.
                                                     \  &lt;key&gt;vertinput&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    <Keyword style_name='type' name='vertoutput'
             hint='Defines a vertex output stream object used to
                  \capture primitives generated by the vertex processing
                  \step(s), recording data from those primitives into
                  \buffer objects. This allows one to preserve the
                  \post-transform rendering state of an object and
                  \resubmit this data multiple times. 
                  \  &lt;key&gt;vertoutput&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    <Keyword style_name='anno' name='vert' hint='Vertex shader annotation.
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_VertexID&lt;/param&gt;
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_InstanceID&lt;/param&gt;
                                                \  &lt;key&gt;out vec4 &lt;/key&gt; &lt;param&gt;gl_Position&lt;/param&gt;
                                                \  &lt;key&gt;out float&lt;/key&gt; &lt;param&gt;gl_PointSize&lt;/param&gt;
                                                \  &lt;key&gt;out float&lt;/key&gt; &lt;param&gt;gl_ClipDistance[]&lt;/param&gt;'/>
    <Keyword style_name='anno' name='tess' hint='Tesselation control annotation.
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_PatchVerticesIn&lt;/param&gt;
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_PrimitiveID&lt;/param&gt;
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_InvocationID&lt;/param&gt;
                                                \  &lt;key&gt;in  vec4 &lt;/key&gt; &lt;param&gt;gl_in[].gl_Position&lt;/param&gt;
                                                \  &lt;key&gt;in  float&lt;/key&gt; &lt;param&gt;gl_in[].gl_PointSize&lt;/param&gt;
                                                \  &lt;key&gt;in  float&lt;/key&gt; &lt;param&gt;gl_in[].gl_ClipDistance[]&lt;/param&gt;
                                                \  &lt;key&gt;out float&lt;/key&gt; &lt;param&gt;gl_TessLevelOuter[3]&lt;/param&gt;
                                                \  &lt;key&gt;out float&lt;/key&gt; &lt;param&gt;gl_TessLevelInner[2]&lt;/param&gt;
                                                \  &lt;key&gt;out vec4 &lt;/key&gt; &lt;param&gt;gl_out[].gl_Position&lt;/param&gt;
                                                \  &lt;key&gt;out float&lt;/key&gt; &lt;param&gt;gl_out[].gl_PointSize&lt;/param&gt;
                                                \  &lt;key&gt;out float&lt;/key&gt; &lt;param&gt;gl_out[].gl_ClipDistance[]&lt;/param&gt;'/>
    <Keyword style_name='anno' name='eval' hint='Tesselation evaluation shader annotation.
                                                \  &lt;key&gt;in  vec3 &lt;/key&gt; &lt;param&gt;gl_TessCoord&lt;/param&gt;
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_PatchVerticesIn&lt;/param&gt;
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_PrimitiveID&lt;/param&gt;
                                                \  &lt;key&gt;in  float&lt;/key&gt; &lt;param&gt;gl_TessLevelOuter[3]&lt;/param&gt;
                                                \  &lt;key&gt;in  float&lt;/key&gt; &lt;param&gt;gl_TessLevelInner[2]&lt;/param&gt;
                                                \  &lt;key&gt;in  vec4 &lt;/key&gt; &lt;param&gt;gl_in[].gl_Position&lt;/param&gt;
                                                \  &lt;key&gt;in  float&lt;/key&gt; &lt;param&gt;gl_in[].gl_PointSize&lt;/param&gt;
                                                \  &lt;key&gt;in  float&lt;/key&gt; &lt;param&gt;gl_in[].gl_ClipDistance[]&lt;/param&gt;
                                                \  &lt;key&gt;out vec4 &lt;/key&gt; &lt;param&gt;gl_Position&lt;/param&gt;
                                                \  &lt;key&gt;out float&lt;/key&gt; &lt;param&gt;gl_PointSize&lt;/param&gt;
                                                \  &lt;key&gt;out float&lt;/key&gt; &lt;param&gt;gl_ClipDistance[]&lt;/param&gt;'/>
    <Keyword style_name='anno' name='geom' hint='Geometry shader annotation.
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_PrimitiveIDIn&lt;/param&gt;
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_InvocationID&lt;/param&gt;
                                                \  &lt;key&gt;in  vec4 &lt;/key&gt; &lt;param&gt;gl_in[].gl_Position&lt;/param&gt;
                                                \  &lt;key&gt;in  float&lt;/key&gt; &lt;param&gt;gl_in[].gl_PointSize&lt;/param&gt;
                                                \  &lt;key&gt;in  float&lt;/key&gt; &lt;param&gt;gl_in[].gl_ClipDistance[]&lt;/param&gt;
                                                \  &lt;key&gt;out int  &lt;/key&gt; &lt;param&gt;gl_PrimitiveID&lt;/param&gt;
                                                \  &lt;key&gt;out int  &lt;/key&gt; &lt;param&gt;gl_Layer&lt;/param&gt;
                                                \  &lt;key&gt;out int  &lt;/key&gt; &lt;param&gt;gl_ViewportIndex&lt;/param&gt;
                                                \  &lt;key&gt;out vec4 &lt;/key&gt; &lt;param&gt;gl_Position&lt;/param&gt;
                                                \  &lt;key&gt;out float&lt;/key&gt; &lt;param&gt;gl_PointSize&lt;/param&gt;
                                                \  &lt;key&gt;out float&lt;/key&gt; &lt;param&gt;gl_ClipDistance[]&lt;/param&gt;'/>
    <Keyword style_name='anno' name='frag' hint='Fragment shader annotation.
                                                \  &lt;key&gt;in  vec4 &lt;/key&gt; &lt;param&gt;gl_FragCoord&lt;/param&gt;
                                                \  &lt;key&gt;in  bool &lt;/key&gt; &lt;param&gt;gl_FrontFacing&lt;/param&gt;
                                                \  &lt;key&gt;in  vec2 &lt;/key&gt; &lt;param&gt;gl_PointCoord&lt;/param&gt;
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_SampleID&lt;/param&gt;
                                                \  &lt;key&gt;in  vec2 &lt;/key&gt; &lt;param&gt;gl_SamplePosition&lt;/param&gt;
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_SampleMaskIn[]&lt;/param&gt;
                                                \  &lt;key&gt;in  float&lt;/key&gt; &lt;param&gt;gl_ClipDistance[]&lt;/param&gt;
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_PrimitiveID&lt;/param&gt;
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_Layer&lt;/param&gt;
                                                \  &lt;key&gt;in  int  &lt;/key&gt; &lt;param&gt;gl_ViewportIndex&lt;/param&gt;
                                                \  &lt;key&gt;out float&lt;/key&gt; &lt;param&gt;gl_FragDepth&lt;/param&gt;
                                                \  &lt;key&gt;out int  &lt;/key&gt; &lt;param&gt;gl_SampleMask[]&lt;/param&gt;'/>
    <Keyword style_name='anno' name='comp' hint='Compute shader annotation.
                                                \  &lt;key&gt;in  uvec3&lt;/key&gt; &lt;param&gt;gl_NumWorkGroups&lt;/param&gt;
                                                \  &lt;key&gt;in  uvec3&lt;/key&gt; &lt;param&gt;gl_WorkGroupSize&lt;/param&gt;
                                                \  &lt;key&gt;in  uvec3&lt;/key&gt; &lt;param&gt;gl_WorkGroupID&lt;/param&gt;
                                                \  &lt;key&gt;in  uvec3&lt;/key&gt; &lt;param&gt;gl_LocalInvocationID&lt;/param&gt;
                                                \  &lt;key&gt;in  uvec3&lt;/key&gt; &lt;param&gt;gl_GlobalInvocationID&lt;/param&gt;
                                                \  &lt;key&gt;in  uint &lt;/key&gt; &lt;param&gt;gl_LocalInvocationIndex&lt;/param&gt;'/>
    <!-- BUFFER -->
    <Lexer type='buffer' lexer='TechBodyLexer'>
      <Style theme='DarkTheme' name='command' fore='#7AC0F4'/>
      <Style theme='LightTheme' name='command' fore='#7AC0F4'/>
      <Keyword style_name='command' name='size'
               hint='Specify the buffer size in bytes.
                    \  &lt;key&gt;size&lt;/key&gt; &lt;param&gt;[bytes]&lt;/param&gt;'/>
      <Keyword style_name='command' name='txt'
               hint='Load data from a text file.
                    \  &lt;key&gt;txt&lt;/key&gt; &lt;param&gt;[text_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='target'
               hint='Specify how the buffer will be
                    \used by the application.
                    \  &lt;key&gt;target&lt;/key&gt; &lt;param&gt;[buffer_target]&lt;/param&gt;'/>
      <Keyword style_name='command' name='usage'
               hint='Specify how the buffer will be
                    \used by the application.
                    \  &lt;key&gt;usage&lt;/key&gt; &lt;param&gt;[hint]&lt;/param&gt;'/>
      <Keyword style_name='command' name='xml'
               hint='Load data from a xml file.
                    \  &lt;key&gt;xml&lt;/key&gt; &lt;param&gt;[path] {node}&lt;/param&gt;'/>
      <Keyword style_name='command' name='class'
               hint='Post process data using the defined method.
                    \  &lt;key&gt;class&lt;/key&gt; &lt;param&gt;[csharp_name] [class_name] [method_name]&lt;/param&gt;'/>
      <!-- buffer - TARGET -->
      <Lexer type='target' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='atomic'/>
        <Keyword style_name='argument' name='array'/>
        <Keyword style_name='argument' name='element'/>
        <Keyword style_name='argument' name='transformFeedback'/>
        <Keyword style_name='argument' name='drawIndirect'/>
        <Keyword style_name='argument' name='shaderStorage'/>
        <Keyword style_name='argument' name='dispatchIndirect'/>
        <Keyword style_name='argument' name='query'/>
      </Lexer>
      <!-- buffer - USAGE -->
      <Lexer type='usage' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='dynamicCopy'/>
        <Keyword style_name='argument' name='dynamicDraw'/>
        <Keyword style_name='argument' name='dynamicRead'/>
        <Keyword style_name='argument' name='staticCopy'/>
        <Keyword style_name='argument' name='staticDraw'/>
        <Keyword style_name='argument' name='staticRead'/>
        <Keyword style_name='argument' name='streamCopy'/>
        <Keyword style_name='argument' name='streamDraw'/>
        <Keyword style_name='argument' name='streamRead'/>
      </Lexer>
    </Lexer>
    <!-- MEMORY -->
    <Lexer type='memory' lexer='TechBodyLexer'>
      <Style theme='DarkTheme' name='command' fore='#7AC0F4'/>
      <Style theme='LightTheme' name='command' fore='#7AC0F4'/>
      <Keyword style_name='command' name='size'
               hint='Specify the memory size in bytes.
                    \  &lt;key&gt;size&lt;/key&gt; &lt;param&gt;[bytes]&lt;/param&gt;'/>
      <Keyword style_name='command' name='txt'
               hint='Load data from a text file.
                    \  &lt;key&gt;txt&lt;/key&gt; &lt;param&gt;[text_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='xml'
               hint='Load data from a xml file.
                    \  &lt;key&gt;xml&lt;/key&gt; &lt;param&gt;[path] {node}&lt;/param&gt;'/>
      <Keyword style_name='command' name='class'
               hint='Post process data using the defined method.
                    \  &lt;key&gt;class&lt;/key&gt; &lt;param&gt;[csharp_name] [class_name] [method_name]&lt;/param&gt;'/>
    </Lexer>
    <!-- CSHARP -->
    <Lexer type='csharp' lexer='TechBodyLexer'>
      <Style theme='DarkTheme' name='command' fore='#7AC0F4'/>
      <Style theme='LightTheme' name='command' fore='#7AC0F4'/>
      <Keyword style_name='command' name='assembly'
               hint='Include the specified assemply.
                    \  &lt;key&gt;assembly&lt;/key&gt; &lt;param&gt;[path] {path} {...}&lt;/param&gt;'/>
      <Keyword style_name='command' name='file'
               hint='Compile the specified files.
                    \  &lt;key&gt;file&lt;/key&gt; &lt;param&gt;[path] {path} {...}&lt;/param&gt;'/>
      <Keyword style_name='command' name='folder'
               hint='Compile all files of the specified folders.
                    \  &lt;key&gt;folder&lt;/key&gt; &lt;param&gt;[path] {path} {...}&lt;/param&gt;'/>
    </Lexer>
    <!-- FRAGOUTPUT -->
    <Lexer type='fragoutput' lexer='TechBodyLexer'>
      <Style theme='DarkTheme' name='command' fore='#7AC0F4'/>
      <Style theme='LightTheme' name='command' fore='#7AC0F4'/>
      <Keyword style_name='command' name='color' 
               hint='Bind image to the next color target.
                    \  &lt;key&gt;color&lt;/key&gt; &lt;param&gt;[image_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='depth' 
               hint='Bind image to the next depth target.
                    \  &lt;key&gt;depth&lt;/key&gt; &lt;param&gt;[image_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='size'
               hint='Set the fragment output size.
                    \  &lt;key&gt;size&lt;/key&gt; &lt;param&gt;[width] [height]&lt;/param&gt;'/>
      <Keyword style_name='command' name='height'
               hint='Set the fragment output height.
                    \  &lt;key&gt;height&lt;/key&gt; &lt;param&gt;[pixels]&lt;/param&gt;'/>
      <Keyword style_name='command' name='width' 
               hint='Set the fragment output width.
                    \  &lt;key&gt;width&lt;/key&gt; &lt;param&gt;[pixels]&lt;/param&gt;'/>
    </Lexer>
    <!-- IMAGE -->
    <Lexer type='image' lexer='TechBodyLexer'>
      <Style theme='DarkTheme' name='command' fore='#7AC0F4'/>
      <Style theme='LightTheme' name='command' fore='#7AC0F4'/>
      <Keyword style_name='command' name='format'
               hint='Set the image pixel format.
                    \  &lt;key&gt;format&lt;/key&gt; &lt;param&gt;[pixel_format]&lt;/param&gt;'/>
      <Keyword style_name='command' name='size' 
               hint='Set image size.
                    \  &lt;key&gt;size&lt;/key&gt; &lt;param&gt;[width] [height] [depth] [length]&lt;/param&gt;'/>
      <Keyword style_name='command' name='file'
               hint='Load image data from file(s).
                    \  &lt;key&gt;file&lt;/key&gt; &lt;param&gt;[path] {path} {...}&lt;/param&gt;'/>
      <Keyword style_name='command' name='type'
               hint='Manually specify the image type.
                    \  &lt;key&gt;type&lt;/key&gt; &lt;param&gt;[texture_type]&lt;/param&gt;'/>
      <!-- image - FORMAT -->
      <Lexer type='format' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='depth'/>
        <Keyword style_name='argument' name='depth16'/>
        <Keyword style_name='argument' name='depth24'/>
        <Keyword style_name='argument' name='depth24stencil8'/>
        <Keyword style_name='argument' name='depth32'/>
        <Keyword style_name='argument' name='depth32f'/>
        <Keyword style_name='argument' name='depth32fstencil8'/>
        <Keyword style_name='argument' name='depthstencil'/>
        <Keyword style_name='argument' name='r8'/>
        <Keyword style_name='argument' name='r8i'/>
        <Keyword style_name='argument' name='r8ui'/>
        <Keyword style_name='argument' name='r16'/>
        <Keyword style_name='argument' name='r16i'/>
        <Keyword style_name='argument' name='r16ui'/>
        <Keyword style_name='argument' name='r16f'/>
        <Keyword style_name='argument' name='r32i'/>
        <Keyword style_name='argument' name='r32ui'/>
        <Keyword style_name='argument' name='r32f'/>
        <Keyword style_name='argument' name='rg8'/>
        <Keyword style_name='argument' name='rg8i'/>
        <Keyword style_name='argument' name='rg8ui'/>
        <Keyword style_name='argument' name='rg16'/>
        <Keyword style_name='argument' name='rg16i'/>
        <Keyword style_name='argument' name='rg16ui'/>
        <Keyword style_name='argument' name='rg16f'/>
        <Keyword style_name='argument' name='rg32i'/>
        <Keyword style_name='argument' name='rg32ui'/>
        <Keyword style_name='argument' name='rg32f'/>
        <Keyword style_name='argument' name='rgb8'/>
        <Keyword style_name='argument' name='rgb8i'/>
        <Keyword style_name='argument' name='rgb8ui'/>
        <Keyword style_name='argument' name='rgb16'/>
        <Keyword style_name='argument' name='rgb16i'/>
        <Keyword style_name='argument' name='rgb16ui'/>
        <Keyword style_name='argument' name='rgb16f'/>
        <Keyword style_name='argument' name='rgb32i'/>
        <Keyword style_name='argument' name='rgb32ui'/>
        <Keyword style_name='argument' name='rgb32f'/>
        <Keyword style_name='argument' name='rgba8'/>
        <Keyword style_name='argument' name='rgba8i'/>
        <Keyword style_name='argument' name='rgba8ui'/>
        <Keyword style_name='argument' name='rgba16'/>
        <Keyword style_name='argument' name='rgba16i'/>
        <Keyword style_name='argument' name='rgba16ui'/>
        <Keyword style_name='argument' name='rgba16f'/>
        <Keyword style_name='argument' name='rgba32i'/>
        <Keyword style_name='argument' name='rgba32ui'/>
        <Keyword style_name='argument' name='rgba32f'/>
      </Lexer>
      <!-- image - TYPE -->
      <Lexer type='type' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='texture1D' hint='1D texture'/>
        <Keyword style_name='argument' name='texture2D' hint='2D texture'/>
        <Keyword style_name='argument' name='texture3D' hint='3D texture/volume texture'/>
        <Keyword style_name='argument' name='texture1DArray' hint='1D texture array'/>
        <Keyword style_name='argument' name='texture2DArray' hint='2D texture array'/>
      </Lexer>
    </Lexer>
    <!-- INSTANCE -->
    <Lexer type='instance' lexer='TechBodyLexer'>
      <Style theme='DarkTheme' name='command' fore='#7AC0F4'/>
      <Style theme='DarkTheme' name='indicator' fore='#2FABA7'/>
      <Style theme='LightTheme' name='command' fore='#7AC0F4'/>
      <Style theme='LightTheme' name='indicator' fore='#2FABA7'/>
      <Keyword style_name='command' name='class' 
               hint='The class that should be instantiated.
                    \  &lt;key&gt;class&lt;/key&gt; &lt;param&gt;[csharp_name] [c#_class]&lt;/param&gt;'/>
      <Keyword style_name='command' name='name' 
               hint='Rename the class instance.
                    \  &lt;key&gt;name&lt;/key&gt; &lt;param&gt;[new_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='connect' 
               hint='Connect two fields. If the source field
                    \changes, so will the connected fields.
                    \  &lt;key&gt;connect&lt;/key&gt; &lt;param&gt;[field_name] [name.field_name]&lt;/param&gt;'/>
    </Lexer>
    <!-- PASS -->
    <Lexer type='pass' lexer='TechBodyLexer'>
      <Style theme='DarkTheme' name='command' fore='#7AC0F4'/>
      <Style theme='LightTheme' name='command' fore='#7AC0F4'/>
      <Keyword style_name='command' name='exec' hint='Execute C# class instance.
                                                     \  &lt;key&gt;exec&lt;/key&gt; &lt;param&gt;[instance_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='comp' hint='Bind compute shader to the rendering pass.
                                                     \  &lt;key&gt;comp&lt;/key&gt; &lt;param&gt;[shader_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='vert' hint='Bind vertex shader to the rendering pass.
                                                     \  &lt;key&gt;vert&lt;/key&gt; &lt;param&gt;[shader_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='tess' hint='Bind tesselation control shader to the rendering pass.
                                                     \  &lt;key&gt;tess&lt;/key&gt; &lt;param&gt;[shader_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='eval' hint='Bind tesselation evaluation shader to the rendering pass.
                                                     \  &lt;key&gt;eval&lt;/key&gt; &lt;param&gt;[shader_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='geom' hint='Bind geometry shader to the rendering pass.
                                                     \  &lt;key&gt;geom&lt;/key&gt; &lt;param&gt;[shader_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='frag' hint='Bind fragment shader to the rendering pass.
                                                     \  &lt;key&gt;frag&lt;/key&gt; &lt;param&gt;[shader_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='compute'
               hint='Dispatch compute shader call.
                    \  &lt;key&gt;compute&lt;/key&gt; &lt;param&gt;[num_group_x] [num_group_y] {num_group_z}&lt;/param&gt;
                    \  &lt;key&gt;compute&lt;/key&gt; &lt;param&gt;[callbuffer_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='draw'
               hint='Draw vertex based (possibly indexed) geometry.
                    \  &lt;key&gt;draw&lt;/key&gt;&lt;param&gt; [vertinput_name] [primitive_type] [base_vertex] {vertex_count}&lt;/param&gt;
                    \  &lt;param&gt;       {base_instance} {instance_count}&lt;/param&gt;
                    \  &lt;key&gt;draw&lt;/key&gt;&lt;param&gt; [vertinput_name] [{indexbuffer_name] [index_type] [primitive_type]&lt;/param&gt;
                    \  &lt;param&gt;       [base_vertex] [base_index] [index_count] {base_instance} {instance_count}&lt;/param&gt;
                    \  &lt;key&gt;draw&lt;/key&gt;&lt;param&gt; [vertinput_name] {callbuffer_name} {primitive_type}&lt;/param&gt;
                    \  &lt;param&gt;       {buffer_offset} {draw_count} {stride}&lt;/param&gt;
                    \  &lt;key&gt;draw&lt;/key&gt;&lt;param&gt; [vertinput_name] [indexbuffer_name] [index_type] [callbuffer_name]&lt;/param&gt;
                    \  &lt;param&gt;       [primitive_type] {buffer_offset} {draw_count} {stride}&lt;/param&gt;
                    \  &lt;key&gt;draw&lt;/key&gt;&lt;param&gt; [vertoutput_name] [primitive_type] {vertoutput_stream} {instance_count}&lt;/param&gt;
                    \
                    \ &lt;code&gt;primitive_type&lt;/code&gt; -- &lt;param&gt;points, lines, lineLoop, lineStrip, triangles,&lt;/param&gt;
                    \    &lt;param&gt;triangleStrip, triangleFan, patch, linesAdjacency, lineStripAdjacency,&lt;/param&gt;
                    \    &lt;param&gt;trianglesAdjacency, triangleStripAdjacency&lt;/param&gt;
                    \ &lt;code&gt;index_type&lt;/code&gt; -- &lt;param&gt;ubyte, ushort, uint&lt;/param&gt;'/>
      <Keyword style_name='command' name='fragout' hint='Bind fragment output object to render pass.
                                                        \  &lt;key&gt;fragout&lt;/key&gt; &lt;param&gt;[fragoutput_name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='vertout'
               hint='Bind vertex output (transform feedback) object to render pass.
                    \  &lt;key&gt;vertout&lt;/key&gt; &lt;param&gt;[vertoutput_name] [output_primitive_type]&lt;/param&gt;
                    \  &lt;param&gt;       {write_mode} [output_varying_name]&lt;/param&gt;
                    \
                    \ &lt;code&gt;write_mode&lt;/code&gt;
                    \    gl_SeparateAttribs &lt;param&gt;write every [output_varying_name]&lt;/param&gt;
                    \       &lt;param&gt; to a new buffer&lt;/param&gt;
                    \    gl_InterleavedAttribs &lt;param&gt;output varyings for different&lt;/param&gt;
                    \       &lt;param&gt; buffers need to be separated by "gl_NextBuffer"&lt;/param&gt;'/>
      <Keyword style_name='command' name='tex'
               hint='Bind/unbind a texture to/from a texture unit.
                    \  &lt;key&gt;tex&lt;/key&gt; &lt;param&gt;[texture_name] [unit]&lt;/param&gt;
                    \  &lt;key&gt;tex&lt;/key&gt; &lt;param&gt;[unit] {unbind}&lt;/param&gt;'/>
      <Keyword style_name='command' name='img'
               hint='Bind/unbind a texture to/from an image unit.
                    \  &lt;key&gt;img&lt;/key&gt; &lt;param&gt;[texture_name] [unit] [level] [layer] [access] [format]&lt;/param&gt;
                    \  &lt;key&gt;img&lt;/key&gt; &lt;param&gt;[unit] {unbind}&lt;/param&gt;'/>
      <Keyword style_name='command' name='samp'
               hint = 'Bind/unbind a texture sampler to/from a texture unit.
                    \  &lt;key&gt;samp&lt;/key&gt; &lt;param&gt;[samp_name] [unit]&lt;/param&gt;
                    \  &lt;key&gt;samp&lt;/key&gt; &lt;param&gt;[unit] {unbind}&lt;/param&gt;'/>
      <Keyword style_name='command' name='atomic'
               hint = 'Bind/unbind an atomic buffer to/from an atomic unit.
                    \  &lt;key&gt;atomic&lt;/key&gt; &lt;param&gt;[buffer_name] [unit]&lt;/param&gt;
                    \  &lt;key&gt;atomic&lt;/key&gt; &lt;param&gt;[unit] {unbind}&lt;/param&gt;'/>
      <!-- pass - TEX -->
      <Lexer type='tex' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='unbind'/>
      </Lexer>
      <!-- pass - IMG -->
      <Lexer type='img' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='unbind'/>
      </Lexer>
      <!-- pass - SAMP -->
      <Lexer type='samp' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='unbind'/>
      </Lexer>
      <Keyword style_name='command' name='glBeginConditionalRender'/>
      <Keyword style_name='command' name='glBeginQuery'/>
      <Keyword style_name='command' name='glBeginQueryIndexed'/>
      <Keyword style_name='command' name='glBlendColor'/>
      <Keyword style_name='command' name='glBlendEquation'/>
      <Keyword style_name='command' name='glBlendEquationi'/>
      <Keyword style_name='command' name='glBlendEquationSeparate'/>
      <Keyword style_name='command' name='glBlendEquationSeparatei'/>
      <Keyword style_name='command' name='glBlendFunc'/>
      <Keyword style_name='command' name='glBlendFunci'/>
      <Keyword style_name='command' name='glBlendFuncSeparate'/>
      <Keyword style_name='command' name='glBlendFuncSeparatei'/>
      <Keyword style_name='command' name='glClampColor'/>
      <Keyword style_name='command' name='glClear'/>
      <Keyword style_name='command' name='glClearBuffer'/>
      <Keyword style_name='command' name='glClearBufferData'/>
      <Keyword style_name='command' name='glClearBufferfi'/>
      <Keyword style_name='command' name='glClearBufferfv'/>
      <Keyword style_name='command' name='glClearBufferiv'/>
      <Keyword style_name='command' name='glClearBufferSubData'/>
      <Keyword style_name='command' name='glClearBufferuiv'/>
      <Keyword style_name='command' name='glClearColor'/>
      <Keyword style_name='command' name='glClearDepth'/>
      <Keyword style_name='command' name='glClearDepthf'/>
      <Keyword style_name='command' name='glClearNamedBufferData'/>
      <Keyword style_name='command' name='glClearNamedBufferSubData'/>
      <Keyword style_name='command' name='glClearNamedFramebufferfi'/>
      <Keyword style_name='command' name='glClearNamedFramebufferfv'/>
      <Keyword style_name='command' name='glClearNamedFramebufferiv'/>
      <Keyword style_name='command' name='glClearNamedFramebufferuiv'/>
      <Keyword style_name='command' name='glClearStencil'/>
      <Keyword style_name='command' name='glClearTexImage'/>
      <Keyword style_name='command' name='glClearTexSubImage'/>
      <Keyword style_name='command' name='glClientWaitSync'/>
      <Keyword style_name='command' name='glClipControl'/>
      <Keyword style_name='command' name='glColorMask'/>
      <Keyword style_name='command' name='glColorMaski'/>
      <Keyword style_name='command' name='glCullFace'/>
      <Keyword style_name='command' name='glDepthFunc'/>
      <Keyword style_name='command' name='glDepthMask'/>
      <Keyword style_name='command' name='glDepthRange'/>
      <Keyword style_name='command' name='glDepthRangeArray'/>
      <Keyword style_name='command' name='glDepthRangeArrayv'/>
      <Keyword style_name='command' name='glDepthRangef'/>
      <Keyword style_name='command' name='glDepthRangeIndexed'/>
      <Keyword style_name='command' name='glDetachShader'/>
      <Keyword style_name='command' name='glDisable'/>
      <Keyword style_name='command' name='glDisablei'/>
      <Keyword style_name='command' name='glEnable'/>
      <Keyword style_name='command' name='glEnablei'/>
      <Keyword style_name='command' name='glEndConditionalRender'/>
      <Keyword style_name='command' name='glEndQuery'/>
      <Keyword style_name='command' name='glEndQueryIndexed'/>
      <Keyword style_name='command' name='glEndTransformFeedback'/>
      <Keyword style_name='command' name='glFlush'/>
      <Keyword style_name='command' name='glFrontFace'/>
      <Keyword style_name='command' name='glLineWidth'/>
      <Keyword style_name='command' name='glLogicOp'/>
      <Keyword style_name='command' name='glMemoryBarrier'/>
      <Keyword style_name='command' name='glMemoryBarrierByRegion'/>
      <Keyword style_name='command' name='glMinSampleShading'/>
      <Keyword style_name='command' name='glPatchParameter'/>
      <Keyword style_name='command' name='glPatchParameterfv'/>
      <Keyword style_name='command' name='glPatchParameteri'/>
      <Keyword style_name='command' name='glPauseTransformFeedback'/>
      <Keyword style_name='command' name='glPointParameter'/>
      <Keyword style_name='command' name='glPointParameterf'/>
      <Keyword style_name='command' name='glPointParameterfv'/>
      <Keyword style_name='command' name='glPointParameteri'/>
      <Keyword style_name='command' name='glPointParameteriv'/>
      <Keyword style_name='command' name='glPointSize'/>
      <Keyword style_name='command' name='glPolygonMode'/>
      <Keyword style_name='command' name='glPolygonOffset'/>
      <Keyword style_name='command' name='glPopDebugGroup'/>
      <Keyword style_name='command' name='glPrimitiveRestartIndex'/>
      <Keyword style_name='command' name='glProvokingVertex'/>
      <Keyword style_name='command' name='glPushDebugGroup'/>
      <Keyword style_name='command' name='glQueryCounter'/>
      <Keyword style_name='command' name='glResumeTransformFeedback'/>
      <Keyword style_name='command' name='glSampleCoverage'/>
      <Keyword style_name='command' name='glSampleMaski'/>
      <Keyword style_name='command' name='glSamplerParameter'/>
      <Keyword style_name='command' name='glSamplerParameterf'/>
      <Keyword style_name='command' name='glSamplerParameterfv'/>
      <Keyword style_name='command' name='glSamplerParameteri'/>
      <Keyword style_name='command' name='glSamplerParameterIiv'/>
      <Keyword style_name='command' name='glSamplerParameterIuiv'/>
      <Keyword style_name='command' name='glSamplerParameteriv'/>
      <Keyword style_name='command' name='glScissor'/>
      <Keyword style_name='command' name='glScissorArray'/>
      <Keyword style_name='command' name='glScissorArrayv'/>
      <Keyword style_name='command' name='glScissorIndexed'/>
      <Keyword style_name='command' name='glScissorIndexedv'/>
      <Keyword style_name='command' name='glShaderStorageBlockBinding'/>
      <Keyword style_name='command' name='glStencilFunc'/>
      <Keyword style_name='command' name='glStencilFuncSeparate'/>
      <Keyword style_name='command' name='glStencilMask'/>
      <Keyword style_name='command' name='glStencilMaskSeparate'/>
      <Keyword style_name='command' name='glStencilOp'/>
      <Keyword style_name='command' name='glStencilOpSeparate'/>
      <Keyword style_name='command' name='glTextureBarrier'/>
      <Keyword style_name='command' name='glUniform1f'/>
      <Keyword style_name='command' name='glUniform1fv'/>
      <Keyword style_name='command' name='glUniform1i'/>
      <Keyword style_name='command' name='glUniform1iv'/>
      <Keyword style_name='command' name='glUniform1ui'/>
      <Keyword style_name='command' name='glUniform1uiv'/>
      <Keyword style_name='command' name='glUniform2f'/>
      <Keyword style_name='command' name='glUniform2fv'/>
      <Keyword style_name='command' name='glUniform2i'/>
      <Keyword style_name='command' name='glUniform2iv'/>
      <Keyword style_name='command' name='glUniform2ui'/>
      <Keyword style_name='command' name='glUniform2uiv'/>
      <Keyword style_name='command' name='glUniform3f'/>
      <Keyword style_name='command' name='glUniform3fv'/>
      <Keyword style_name='command' name='glUniform3i'/>
      <Keyword style_name='command' name='glUniform3iv'/>
      <Keyword style_name='command' name='glUniform3ui'/>
      <Keyword style_name='command' name='glUniform3uiv'/>
      <Keyword style_name='command' name='glUniform4f'/>
      <Keyword style_name='command' name='glUniform4fv'/>
      <Keyword style_name='command' name='glUniform4i'/>
      <Keyword style_name='command' name='glUniform4iv'/>
      <Keyword style_name='command' name='glUniform4ui'/>
      <Keyword style_name='command' name='glUniform4uiv'/>
      <Keyword style_name='command' name='glUniformBlockBinding'/>
      <Keyword style_name='command' name='glUniformMatrix2fv'/>
      <Keyword style_name='command' name='glUniformMatrix2x3fv'/>
      <Keyword style_name='command' name='glUniformMatrix2x4fv'/>
      <Keyword style_name='command' name='glUniformMatrix3fv'/>
      <Keyword style_name='command' name='glUniformMatrix3x2fv'/>
      <Keyword style_name='command' name='glUniformMatrix3x4fv'/>
      <Keyword style_name='command' name='glUniformMatrix4fv'/>
      <Keyword style_name='command' name='glUniformMatrix4x2fv'/>
      <Keyword style_name='command' name='glUniformMatrix4x3fv'/>
      <Keyword style_name='command' name='glUniformSubroutines'/>
      <Keyword style_name='command' name='glUniformSubroutinesuiv'/>
      <Keyword style_name='command' name='glViewport'/>
      <Keyword style_name='command' name='glViewportArray'/>
      <Keyword style_name='command' name='glViewportArrayv'/>
      <Keyword style_name='command' name='glViewportIndexed'/>
      <Keyword style_name='command' name='glViewportIndexedf'/>
      <Keyword style_name='command' name='glViewportIndexedfv'/>
      <Keyword style_name='command' name='glWaitSync'/>
      <!-- pass - DRAW -->
      <Lexer type='draw' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='lineLoop'/>
        <Keyword style_name='argument' name='lineLoop'/>
        <Keyword style_name='argument' name='lines'/>
        <Keyword style_name='argument' name='linesAdjacency'/>
        <Keyword style_name='argument' name='lineStrip'/>
        <Keyword style_name='argument' name='lineStripAdjacency'/>
        <Keyword style_name='argument' name='patch'/>
        <Keyword style_name='argument' name='points'/>
        <Keyword style_name='argument' name='triangleFan'/>
        <Keyword style_name='argument' name='triangles'/>
        <Keyword style_name='argument' name='trianglesAdjacency'/>
        <Keyword style_name='argument' name='triangleStrip'/>
        <Keyword style_name='argument' name='triangleStripAdjacency'/>
        <Keyword style_name='argument' name='ubyte' hint='index buffer type is unsigned byte'/>
        <Keyword style_name='argument' name='uint' hint='index buffer type is unsigned integer'/>
        <Keyword style_name='argument' name='ushort' hint='index buffer type is unsigned short'/>
      </Lexer>
      <!-- pass - VERTOUT -->
      <Lexer type='vertout' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='lines'/>
        <Keyword style_name='argument' name='points'/>
        <Keyword style_name='argument' name='triangles'/>
      </Lexer>
    </Lexer>
    <!-- SAMPLER -->
    <Lexer type='sampler' lexer='TechBodyLexer'>
      <Style theme='DarkTheme' name='command' fore='#7AC0F4'/>
      <Style theme='LightTheme' name='command' fore='#7AC0F4'/>
      <Keyword style_name='command' name='magfilter'
               hint='&lt;key&gt;magfilter&lt;/key&gt; &lt;param&gt;[filter_type]&lt;/param&gt;'/>
      <Keyword style_name='command' name='minfilter'
               hint='&lt;key&gt;minfilter&lt;/key&gt; &lt;param&gt;[filter_type]&lt;/param&gt;'/>
      <Keyword style_name='command' name='wrap'
               hint='&lt;key&gt;wrap&lt;/key&gt; &lt;param&gt;[wrap_type]&lt;/param&gt;'/>
      <!-- sampler - MAGFILTER -->
      <Lexer type='magfilter' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='linear'/>
        <Keyword style_name='argument' name='nearest'/>
      </Lexer>
      <!-- sampler - MINFILTER -->
      <Lexer type='minfilter' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='linear'/>
        <Keyword style_name='argument' name='nearest'/>
        <Keyword style_name='argument' name='linearMipmapLinear'/>
        <Keyword style_name='argument' name='linearMipmapNearest'/>
        <Keyword style_name='argument' name='nearestMipmapLinear'/>
        <Keyword style_name='argument' name='nearestMipmapNearest'/>
      </Lexer>
      <!-- sampler - WRAP -->
      <Lexer type='wrap' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='clampToBorder'/>
        <Keyword style_name='argument' name='clampToEdge'/>
        <Keyword style_name='argument' name='mirroredRepeat'/>
        <Keyword style_name='argument' name='repeat'/>
      </Lexer>
    </Lexer>
    <!-- TECH -->
    <Lexer type='tech' lexer='TechBodyLexer'>
      <Style theme='DarkTheme' name='command' fore='#7AC0F4'/>
      <Style theme='LightTheme' name='command' fore='#7AC0F4'/>
      <Keyword style_name='command' name='pass'
               hint='Execute this pass every frame.
                    \  &lt;key&gt;pass&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='init'
               hint='Execute this pass only once
                    \before all "normal" passes.
                    \  &lt;key&gt;init&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='uninit'
               hint='Execute this pass only once
                    \before the technique is destroyed.
                    \  &lt;key&gt;uninit&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
    </Lexer>
    <!-- TEXTURE -->
    <Lexer type='texture' lexer='TechBodyLexer'>
      <Style theme='DarkTheme' name='command' fore='#7AC0F4'/>
      <Style theme='LightTheme' name='command' fore='#7AC0F4'/>
      <Keyword style_name='command' name='buff' 
               hint='&lt;key&gt;buff&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='img' 
               hint='&lt;key&gt;img&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='samp' 
               hint='&lt;key&gt;samp&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='format' 
               hint='&lt;key&gt;format&lt;/key&gt; &lt;param&gt;[pixel_format]&lt;/param&gt;'/>
      <!-- image - FORMAT -->
      <Lexer type='format' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='depth'/>
        <Keyword style_name='argument' name='depth16'/>
        <Keyword style_name='argument' name='depth24'/>
        <Keyword style_name='argument' name='depth24stencil8'/>
        <Keyword style_name='argument' name='depth32'/>
        <Keyword style_name='argument' name='depth32f'/>
        <Keyword style_name='argument' name='depth32fstencil8'/>
        <Keyword style_name='argument' name='depthstencil'/>
        <Keyword style_name='argument' name='r8'/>
        <Keyword style_name='argument' name='r8i'/>
        <Keyword style_name='argument' name='r8ui'/>
        <Keyword style_name='argument' name='r16'/>
        <Keyword style_name='argument' name='r16i'/>
        <Keyword style_name='argument' name='r16ui'/>
        <Keyword style_name='argument' name='r16f'/>
        <Keyword style_name='argument' name='r32i'/>
        <Keyword style_name='argument' name='r32ui'/>
        <Keyword style_name='argument' name='r32f'/>
        <Keyword style_name='argument' name='rg8'/>
        <Keyword style_name='argument' name='rg8i'/>
        <Keyword style_name='argument' name='rg8ui'/>
        <Keyword style_name='argument' name='rg16'/>
        <Keyword style_name='argument' name='rg16i'/>
        <Keyword style_name='argument' name='rg16ui'/>
        <Keyword style_name='argument' name='rg16f'/>
        <Keyword style_name='argument' name='rg32i'/>
        <Keyword style_name='argument' name='rg32ui'/>
        <Keyword style_name='argument' name='rg32f'/>
        <Keyword style_name='argument' name='rgb8'/>
        <Keyword style_name='argument' name='rgb8i'/>
        <Keyword style_name='argument' name='rgb8ui'/>
        <Keyword style_name='argument' name='rgb16'/>
        <Keyword style_name='argument' name='rgb16i'/>
        <Keyword style_name='argument' name='rgb16ui'/>
        <Keyword style_name='argument' name='rgb16f'/>
        <Keyword style_name='argument' name='rgb32i'/>
        <Keyword style_name='argument' name='rgb32ui'/>
        <Keyword style_name='argument' name='rgb32f'/>
        <Keyword style_name='argument' name='rgba8'/>
        <Keyword style_name='argument' name='rgba8i'/>
        <Keyword style_name='argument' name='rgba8ui'/>
        <Keyword style_name='argument' name='rgba16'/>
        <Keyword style_name='argument' name='rgba16i'/>
        <Keyword style_name='argument' name='rgba16ui'/>
        <Keyword style_name='argument' name='rgba16f'/>
        <Keyword style_name='argument' name='rgba32i'/>
        <Keyword style_name='argument' name='rgba32ui'/>
        <Keyword style_name='argument' name='rgba32f'/>
      </Lexer>
    </Lexer>
    <!-- VERTINPUT -->
    <Lexer type='vertinput' lexer='TechBodyLexer'>
      <Style theme='DarkTheme' name='command' fore='#7AC0F4'/>
      <Style theme='LightTheme' name='command' fore='#7AC0F4'/>
      <Keyword style_name='command' name='attr'
               hint='Bind buffer to vertex input stream.
                    \  &lt;key&gt;attr&lt;/key&gt; &lt;param&gt;[buff_name] [type] [dim] {stride} {offset} {divisor}&lt;/param&gt;
                    \
                    \ &lt;code&gt;type&lt;/code&gt; -- &lt;param&gt;byte, ubyte, short, ushort, int, uint, float, double, half&lt;/param&gt;
                    \ &lt;code&gt;dim&lt;/code&gt; -- &lt;param&gt;vector dimension (must be 1, 2, 3 or 4)&lt;/param&gt;
                    \ &lt;code&gt;stride&lt;/code&gt; -- &lt;param&gt;stride between two vertex values in bytes&lt;/param&gt;
                    \ &lt;code&gt;offset&lt;/code&gt; -- &lt;param&gt;buffer offset of the first vertex value&lt;/param&gt;
                    \ &lt;code&gt;divisor&lt;/code&gt; -- &lt;param&gt;for how many instances should the&lt;/param&gt;
                    \    &lt;param&gt; value be used (0 disables instancing for this attribute)&lt;/param&gt;'/>
      <!-- vertinput - ATTR -->
      <Lexer type='attr' lexer='CommandLexer'>
        <Style theme='DarkTheme' name='argument' fore='#9589CC'/>
        <Style theme='LightTheme' name='argument' fore='#9589CC'/>
        <Keyword style_name='argument' name='byte'/>
        <Keyword style_name='argument' name='double'/>
        <Keyword style_name='argument' name='float'/>
        <Keyword style_name='argument' name='half'/>
        <Keyword style_name='argument' name='int'/>
        <Keyword style_name='argument' name='short'/>
        <Keyword style_name='argument' name='ubyte'/>
        <Keyword style_name='argument' name='uint'/>
        <Keyword style_name='argument' name='unsignedByte'/>
        <Keyword style_name='argument' name='unsignedInt'/>
        <Keyword style_name='argument' name='unsignedShort'/>
        <Keyword style_name='argument' name='ushort'/>
      </Lexer>
    </Lexer>
    <!-- VERTOUTPUT -->
    <Lexer type='vertoutput' lexer='TechBodyLexer'>
      <Style theme='DarkTheme' name='command' fore='#7AC0F4'/>
      <Style theme='LightTheme' name='command' fore='#7AC0F4'/>
      <Keyword style_name='command' name='buff' 
               hint='&lt;key&gt;buff&lt;/key&gt; &lt;param&gt;[name]&lt;/param&gt;'/>
      <Keyword style_name='command' name='pause' 
               hint='&lt;key&gt;pause&lt;/key&gt; &lt;param&gt;[true|false]&lt;/param&gt;'/>
      <Keyword style_name='command' name='resume'
               hint='&lt;key&gt;resume&lt;/key&gt; &lt;param&gt;[true|false]&lt;/param&gt;'/>
    </Lexer>
    <!-- SHADER -->
    <Lexer type='shader' lexer='GlslLexer'>
      <Style theme='DarkTheme' name='keyword' fore='#3C81C1'/>
      <Style theme='DarkTheme' name='datatype' fore='#7AC0F4'/>
      <Style theme='DarkTheme' name='preprocessor' fore='#9B9B9B'/>
      <Style theme='DarkTheme' name='special' fore='#D57C30'/>
      <Style theme='LightTheme' name='keyword' fore='#3C81C1'/>
      <Style theme='LightTheme' name='datatype' fore='#7AC0F4'/>
      <Style theme='LightTheme' name='preprocessor' fore='#9B9B9B'/>
      <Style theme='LightTheme' name='special' fore='#D57C30'/>
      <Keyword style_name='special' name='global' hint='Get the value of a global object variable before compiling the shader.
                                                       \  &lt;key&gt;global&lt;/key&gt;.name.variable'/>
      <Keyword style_name='keyword' name='in' hint='Specify a shader input stream from a vertex
                                                   \buffer object or the previous shader stage.'/>
      <Keyword style_name='keyword' name='out' hint='Specify a sshader output stream for the next
                                                    \shader stage or a transform feedback buffer.'/>
      <Keyword style_name='keyword' name='const' hint='Specify a constant variable indicating
                                                      \that the variable will not change.'/>
      <Keyword style_name='keyword' name='layout' hint='Layout qualifiers affect where the storage
                                                       \for a variable comes from, as well as other
                                                       \user-facing properties of a particular definition.'/>
      <Keyword style_name='keyword' name='coherent' hint='Using this requires the appropriate memory barriers to be
                                                         \executed, so that visibility can be achieved. When communicating
                                                         \between shader invocations for different rendering commands,
                                                         \glMemoryBarrier should be used instead of this qualifier.'/>
      <Keyword style_name='keyword' name='volatile' hint='With this qualifier, the compiler assumes that the contents
                                                         \of the storage represented by the variable could be changed
                                                         \at any time.'/>
      <Keyword style_name='keyword' name='restrict' hint='With this qualifier, you are telling the compiler that this
                                                         \particular variable is the only variable that can modify the
                                                         \memory visible through that variable within this shader
                                                         \invocation (other shader stages do not count here). This
                                                         \allows the compiler to optimize reads/writes better.'/>
      <Keyword style_name='keyword' name='readonly' hint='The variable can only be used for reading operations.'/>
      <Keyword style_name='keyword' name='writeonly' hint='The variable can only be used for writing operations
                                                          \(atomic writes are forbidden because they also count as reads).'/>
      <Keyword style_name='keyword' name='uniform' hint='define uniform variable, buffer or sampler object'/>
      <Keyword style_name='keyword' name='struct' hint='define a data structure'/>
      <Keyword style_name='keyword' name='image1D' hint='1D image binding unit'/>
      <Keyword style_name='keyword' name='image1DArray' hint='1D image array binding unit'/>
      <Keyword style_name='keyword' name='image2D' hint='2D image binding unit'/>
      <Keyword style_name='keyword' name='image2DArray' hint='2D image array binding unit'/>
      <Keyword style_name='keyword' name='image2DMS' hint='2D multi-sample image binding unit'/>
      <Keyword style_name='keyword' name='image2DMSArray' hint='2D multi-sample image array binding unit'/>
      <Keyword style_name='keyword' name='image2DRect' hint='2D rectangular image array binding unit'/>
      <Keyword style_name='keyword' name='image3D' hint='3D image array binding unit'/>
      <Keyword style_name='keyword' name='imageBuffer' hint='buffer image binding unit'/>
      <Keyword style_name='keyword' name='imageCube' hint='cube map image binding unit'/>
      <Keyword style_name='keyword' name='imageCubeArray' hint='cube map image array binding unit'/>
      <Keyword style_name='keyword' name='isampler1D' hint='1D texture binding unit for integer textures'/>
      <Keyword style_name='keyword' name='isampler1DArray' hint='1D texture array binding unit for integer textures'/>
      <Keyword style_name='keyword' name='isampler2D' hint='2D texture binding unit for integer textures'/>
      <Keyword style_name='keyword' name='isampler2DArray' hint='2D texture array binding unit for integer textures'/>
      <Keyword style_name='keyword' name='isampler2DMS' hint='2D multi sample texture binding unit for integer textures'/>
      <Keyword style_name='keyword' name='isampler2DMSArray' hint='2D multi sample texture array binding unit for integer textures'/>
      <Keyword style_name='keyword' name='isampler2DRect' hint='2D rectangular texture binding unit for integer textures'/>
      <Keyword style_name='keyword' name='isampler3D' hint='3D texture binding unit for integer textures'/>
      <Keyword style_name='keyword' name='isamplerBuffer' hint='buffer texture binding unit for integer textures'/>
      <Keyword style_name='keyword' name='isamplerCube' hint='cube map texture binding unit for integer textures'/>
      <Keyword style_name='keyword' name='isamplerCubeArray' hint='cube map texture array binding unit for integer textures'/>
      <Keyword style_name='keyword' name='sampler1D' hint='1D texture binding unit'/>
      <Keyword style_name='keyword' name='sampler1DArray' hint='1D texture array binding unit'/>
      <Keyword style_name='keyword' name='sampler1DArrayShadow' hint='1D shadow texture array binding unit'/>
      <Keyword style_name='keyword' name='sampler1DShadow' hint='1D shadow texture binding unit'/>
      <Keyword style_name='keyword' name='sampler2D' hint='2D texture binding unit'/>
      <Keyword style_name='keyword' name='sampler2DArray' hint='2D texture array binding unit'/>
      <Keyword style_name='keyword' name='sampler2DArrayShadow' hint='2D shadow texture array binding unit'/>
      <Keyword style_name='keyword' name='sampler2DMS' hint='2D multi-sample texture binding unit'/>
      <Keyword style_name='keyword' name='sampler2DMSArray' hint='2D multi-sample texture array binding unit'/>
      <Keyword style_name='keyword' name='sampler2DRect' hint='2D rectangular texture array binding unit'/>
      <Keyword style_name='keyword' name='sampler2DRectShadow' hint='2D rectangular shadow texture array binding unit'/>
      <Keyword style_name='keyword' name='sampler2DShadow' hint='2D shadow texture binding unit'/>
      <Keyword style_name='keyword' name='sampler3D' hint='3D texture array binding unit'/>
      <Keyword style_name='keyword' name='samplerBuffer' hint='buffer texture binding unit'/>
      <Keyword style_name='keyword' name='samplerCube' hint='cube map binding unit'/>
      <Keyword style_name='keyword' name='samplerCubeArray' hint='cube map array binding unit'/>
      <Keyword style_name='keyword' name='samplerCubeArrayShadow' hint='shadow cube map array binding unit'/>
      <Keyword style_name='keyword' name='samplerCubeShadow' hint='shadow cube map binding unit'/>
      <Keyword style_name='keyword' name='atomic_uint' hint='atomic counter binding unit'/>
      <Keyword style_name='datatype' name='void'/>
      <Keyword style_name='datatype' name='bool'/>
      <Keyword style_name='datatype' name='int'/>
      <Keyword style_name='datatype' name='uint'/>
      <Keyword style_name='datatype' name='float'/>
      <Keyword style_name='datatype' name='bvec2' hint='bool vector with 2 components'/>
      <Keyword style_name='datatype' name='bvec3' hint='bool vector with 3 components'/>
      <Keyword style_name='datatype' name='bvec4' hint='bool vector with 4 components'/>
      <Keyword style_name='datatype' name='ivec2' hint='int vector with 2 components'/>
      <Keyword style_name='datatype' name='ivec3' hint='int vector with 3 components'/>
      <Keyword style_name='datatype' name='ivec4' hint='int vector with 4 components'/>
      <Keyword style_name='datatype' name='uvec2' hint='unsigned int vector with 2 components'/>
      <Keyword style_name='datatype' name='uvec3' hint='unsigned int vector with 3 components'/>
      <Keyword style_name='datatype' name='uvec4' hint='unsigned int vector with 4 components'/>
      <Keyword style_name='datatype' name='vec2' hint='float vector with 2 components'/>
      <Keyword style_name='datatype' name='vec3' hint='float vector with 3 components'/>
      <Keyword style_name='datatype' name='vec4' hint='float vector with 4 components'/>
      <Keyword style_name='datatype' name='dvec2' hint='double vector with 2 components'/>
      <Keyword style_name='datatype' name='dvec3' hint='double vector with 3 components'/>
      <Keyword style_name='datatype' name='dvec4' hint='double vector with 4 components'/>
      <Keyword style_name='datatype' name='mat2' hint='float matrix with 2 columns and 2 rows'/>
      <Keyword style_name='datatype' name='mat2x2' hint='float matrix with 2 columns and 2 rows'/>
      <Keyword style_name='datatype' name='mat2x3' hint='float matrix with 2 columns and 3 rows'/>
      <Keyword style_name='datatype' name='mat2x4' hint='float matrix with 2 columns and 4 rows'/>
      <Keyword style_name='datatype' name='mat3' hint='float matrix with 3 columns and 3 rows'/>
      <Keyword style_name='datatype' name='mat3x2' hint='float matrix with 3 columns and 2 rows'/>
      <Keyword style_name='datatype' name='mat3x3' hint='float matrix with 3 columns and 3 rows'/>
      <Keyword style_name='datatype' name='mat3x4' hint='float matrix with 3 columns and 4 rows'/>
      <Keyword style_name='datatype' name='mat4' hint='float matrix with 4 columns and 4 rows'/>
      <Keyword style_name='datatype' name='mat4x2' hint='float matrix with 4 columns and 2 rows'/>
      <Keyword style_name='datatype' name='mat4x3' hint='float matrix with 4 columns and 3 rows'/>
      <Keyword style_name='datatype' name='mat4x4' hint='float matrix with 4 columns and 4 rows'/>
      <Keyword style_name='datatype' name='dmat2' hint='double matrix with 2 columns and 2 rows'/>
      <Keyword style_name='datatype' name='dmat2x2' hint='double matrix with 2 columns and 2 rows'/>
      <Keyword style_name='datatype' name='dmat2x3' hint='double matrix with 2 columns and 3 rows'/>
      <Keyword style_name='datatype' name='dmat2x4' hint='double matrix with 2 columns and 4 rows'/>
      <Keyword style_name='datatype' name='dmat3' hint='double matrix with 3 columns and 3 rows'/>
      <Keyword style_name='datatype' name='dmat3x2' hint='double matrix with 3 columns and 2 rows'/>
      <Keyword style_name='datatype' name='dmat3x3' hint='double matrix with 3 columns and 3 rows'/>
      <Keyword style_name='datatype' name='dmat3x4' hint='double matrix with 3 columns and 4 rows'/>
      <Keyword style_name='datatype' name='dmat4' hint='double matrix with 4 columns and 4 rows'/>
      <Keyword style_name='datatype' name='dmat4x2' hint='double matrix with 4 columns and 2 rows'/>
      <Keyword style_name='datatype' name='dmat4x3' hint='double matrix with 4 columns and 3 rows'/>
      <Keyword style_name='datatype' name='dmat4x4' hint='double matrix with 4 columns and 4 rows'/>
      <Lexer type='layout' lexer='GlslLayoutLexer'>
        <Style theme='DarkTheme' name='qualifier' fore='#9589CC'/>
        <Style theme='DarkTheme' name='special' fore='#D57C30'/>
        <Style theme='LightTheme' name='qualifier' fore='#9589CC'/>
        <Style theme='LightTheme' name='special' fore='#D57C30'/>
        <Keyword style_name='special' name='global' hint='Get the value of a global object variable before compiling the shader.
                                                         \  &lt;key&gt;global&lt;/key&gt;.name.variable'/>
        <Keyword style_name='qualifier' name='local_size_x'/>
        <Keyword style_name='qualifier' name='local_size_y'/>
        <Keyword style_name='qualifier' name='local_size_z'/>
        <Keyword style_name='qualifier' name='vertices'
                 hint='Specify a particular vertex count for
                      \Tessellation Control Shaders output patches.'/>
        <Keyword style_name='qualifier' name='points'
                 hint='The input/output primitive type of the geometry shader are points.'/>
        <Keyword style_name='qualifier' name='lines'
                 hint='The input/output primitive type of the geometry shader are lines.'/>
        <Keyword style_name='qualifier' name='lines_adjacency'
                 hint='The output primitive type of the geometry shader are adjacency lines.'/>
        <Keyword style_name='qualifier' name='line_strip'
                 hint='The output primitive type of the geometry shader are line strips.'/>
        <Keyword style_name='qualifier' name='triangles'
                 hint='The input primitive type of the geometry shader are triangles.'/>
        <Keyword style_name='qualifier' name='triangles_adjacency'
                 hint='The output primitive type of the geometry shader are adjacency triangles.'/>
        <Keyword style_name='qualifier' name='triangle_strip'
                 hint='The output primitive type of the geometry shader are triangles strips.'/>
        <Keyword style_name='qualifier' name='max_vertices'
                 hint='The number must be a compile-time constant, and it
                      \defines the maximum number of vertices that will
                      \be written by a single invocation of the GS.'/>
        <Keyword style_name='qualifier' name='depth_any'
                 hint='Disables the depth test.'/>
        <Keyword style_name='qualifier' name='depth_greater'
                 hint='To pass the depth test the new depth value must be greater.'/>
        <Keyword style_name='qualifier' name='depth_less'
                 hint='To pass the depth test the new depth value must be less.'/>
        <Keyword style_name='qualifier' name='depth_unchanged'
                 hint='To pass the depth test the new depth value must be equal.'/>
        <Keyword style_name='qualifier' name='early_fragment_tests'
                 hint='Perform depth test before executing the shader.'/>
        <Keyword style_name='qualifier' name='origin_upper_left'
                 hint='Specifies that gl_FragCoord​ will have the origin
                      \(0, 0) in the upper-left of the screen.'/>
        <Keyword style_name='qualifier' name='pixel_center_integer'
                 hint='Specifies that the X and Y of gl_FragCoord
                      \will be shifted by a half-pixel, so that the
                      \center of each pixel is an integer value.'/>
        <Keyword style_name='qualifier' name='index'
                 hint='Used in combination with the location
                      \qualifier for dual source blending.'/>
        <Keyword style_name='qualifier' name='location'
                 hint='Assigns the stream to the specified unit.'/>
        <Keyword style_name='qualifier' name='component'
                 hint='Used in combination with the location
                      \qualifier to address specific vec-
                      \components of the input/output stream.'/>
        <Keyword style_name='qualifier' name='xfb_buffer'
                 hint='Specifies the transform feedback output buffer.'/>
        <Keyword style_name='qualifier' name='xfb_offset'
                 hint='Specifies the first position of the transform
                      \feedback output buffer to be written to.'/>
        <Keyword style_name='qualifier' name='xfb_stride'
                 hint='Specifies the stride between transform
                      \feedback buffer outputs.'/>
        <Keyword style_name='qualifier' name='r8'/>
        <Keyword style_name='qualifier' name='r8i'/>
        <Keyword style_name='qualifier' name='r8ui'/>
        <Keyword style_name='qualifier' name='r16'/>
        <Keyword style_name='qualifier' name='r16i'/>
        <Keyword style_name='qualifier' name='r16ui'/>
        <Keyword style_name='qualifier' name='r16f'/>
        <Keyword style_name='qualifier' name='r32i'/>
        <Keyword style_name='qualifier' name='r32ui'/>
        <Keyword style_name='qualifier' name='r32f'/>
        <Keyword style_name='qualifier' name='rg8'/>
        <Keyword style_name='qualifier' name='rg8i'/>
        <Keyword style_name='qualifier' name='rg8ui'/>
        <Keyword style_name='qualifier' name='rg16'/>
        <Keyword style_name='qualifier' name='rg16i'/>
        <Keyword style_name='qualifier' name='rg16ui'/>
        <Keyword style_name='qualifier' name='rg16f'/>
        <Keyword style_name='qualifier' name='rg32i'/>
        <Keyword style_name='qualifier' name='rg32ui'/>
        <Keyword style_name='qualifier' name='rg32f'/>
        <Keyword style_name='qualifier' name='rgb8'/>
        <Keyword style_name='qualifier' name='rgb8i'/>
        <Keyword style_name='qualifier' name='rgb8ui'/>
        <Keyword style_name='qualifier' name='rgb16'/>
        <Keyword style_name='qualifier' name='rgb16i'/>
        <Keyword style_name='qualifier' name='rgb16ui'/>
        <Keyword style_name='qualifier' name='rgb16f'/>
        <Keyword style_name='qualifier' name='rgb32i'/>
        <Keyword style_name='qualifier' name='rgb32ui'/>
        <Keyword style_name='qualifier' name='rgb32f'/>
        <Keyword style_name='qualifier' name='rgba8'/>
        <Keyword style_name='qualifier' name='rgba8i'/>
        <Keyword style_name='qualifier' name='rgba8ui'/>
        <Keyword style_name='qualifier' name='rgba16'/>
        <Keyword style_name='qualifier' name='rgba16i'/>
        <Keyword style_name='qualifier' name='rgba16ui'/>
        <Keyword style_name='qualifier' name='rgba16f'/>
        <Keyword style_name='qualifier' name='rgba32i'/>
        <Keyword style_name='qualifier' name='rgba32ui'/>
        <Keyword style_name='qualifier' name='rgba32f'/>
        <Keyword style_name='qualifier' name='std140'
                 hint='Force variables to be vec4 aligned.'/>
        <Keyword style_name='qualifier' name='binding'
                 hint='The binding unit of the shader resource.'/>
        <Keyword style_name='qualifier' name='offset'
                 hint='Atomic counters also have an optional offset parameter.
                      \The offset is the byte offset from the beginning of the
                      \range bound to the target to the location where this
                      \variable gets its 32-bits of storage.'/>
      </Lexer>
      <Lexer type='struct' lexer='GlslStructLexer'>
        <Style theme='DarkTheme' name='keyword' fore='#3C81C1'/>
        <Style theme='DarkTheme' name='datatype' fore='#7AC0F4'/>
        <Style theme='DarkTheme' name='special' fore='#D57C30'/>
        <Style theme='LightTheme' name='keyword' fore='#3C81C1'/>
        <Style theme='LightTheme' name='datatype' fore='#7AC0F4'/>
        <Style theme='LightTheme' name='special' fore='#D57C30'/>
        <Keyword style_name='special' name='global' hint='Get the value of a global object variable before compiling the shader.
                                                         \  &lt;key&gt;global&lt;/key&gt;.name.variable'/>
        <Keyword style_name='keyword' name='layout' hint='Specify additional qualifications for the member variable.'/>
        <Keyword style_name='datatype' name='void'/>
        <Keyword style_name='datatype' name='bool'/>
        <Keyword style_name='datatype' name='int'/>
        <Keyword style_name='datatype' name='uint'/>
        <Keyword style_name='datatype' name='float'/>
        <Keyword style_name='datatype' name='atomic_uint'/>
        <Keyword style_name='datatype' name='bvec2' hint='bool vector with 2 components'/>
        <Keyword style_name='datatype' name='bvec3' hint='bool vector with 3 components'/>
        <Keyword style_name='datatype' name='bvec4' hint='bool vector with 4 components'/>
        <Keyword style_name='datatype' name='ivec2' hint='int vector with 2 components'/>
        <Keyword style_name='datatype' name='ivec3' hint='int vector with 3 components'/>
        <Keyword style_name='datatype' name='ivec4' hint='int vector with 4 components'/>
        <Keyword style_name='datatype' name='uvec2' hint='unsigned int vector with 2 components'/>
        <Keyword style_name='datatype' name='uvec3' hint='unsigned int vector with 3 components'/>
        <Keyword style_name='datatype' name='uvec4' hint='unsigned int vector with 4 components'/>
        <Keyword style_name='datatype' name='vec2' hint='float vector with 2 components'/>
        <Keyword style_name='datatype' name='vec3' hint='float vector with 3 components'/>
        <Keyword style_name='datatype' name='vec4' hint='float vector with 4 components'/>
        <Keyword style_name='datatype' name='dvec2' hint='double vector with 2 components'/>
        <Keyword style_name='datatype' name='dvec3' hint='double vector with 3 components'/>
        <Keyword style_name='datatype' name='dvec4' hint='double vector with 4 components'/>
        <Keyword style_name='datatype' name='mat2' hint='float matrix with 2 columns and 2 rows'/>
        <Keyword style_name='datatype' name='mat2x2' hint='float matrix with 2 columns and 2 rows'/>
        <Keyword style_name='datatype' name='mat2x3' hint='float matrix with 2 columns and 3 rows'/>
        <Keyword style_name='datatype' name='mat2x4' hint='float matrix with 2 columns and 4 rows'/>
        <Keyword style_name='datatype' name='mat3' hint='float matrix with 3 columns and 3 rows'/>
        <Keyword style_name='datatype' name='mat3x2' hint='float matrix with 3 columns and 2 rows'/>
        <Keyword style_name='datatype' name='mat3x3' hint='float matrix with 3 columns and 3 rows'/>
        <Keyword style_name='datatype' name='mat3x4' hint='float matrix with 3 columns and 4 rows'/>
        <Keyword style_name='datatype' name='mat4' hint='float matrix with 4 columns and 4 rows'/>
        <Keyword style_name='datatype' name='mat4x2' hint='float matrix with 4 columns and 2 rows'/>
        <Keyword style_name='datatype' name='mat4x3' hint='float matrix with 4 columns and 3 rows'/>
        <Keyword style_name='datatype' name='mat4x4' hint='float matrix with 4 columns and 4 rows'/>
        <Keyword style_name='datatype' name='dmat2' hint='double matrix with 2 columns and 2 rows'/>
        <Keyword style_name='datatype' name='dmat2x2' hint='double matrix with 2 columns and 2 rows'/>
        <Keyword style_name='datatype' name='dmat2x3' hint='double matrix with 2 columns and 3 rows'/>
        <Keyword style_name='datatype' name='dmat2x4' hint='double matrix with 2 columns and 4 rows'/>
        <Keyword style_name='datatype' name='dmat3' hint='double matrix with 3 columns and 3 rows'/>
        <Keyword style_name='datatype' name='dmat3x2' hint='double matrix with 3 columns and 2 rows'/>
        <Keyword style_name='datatype' name='dmat3x3' hint='double matrix with 3 columns and 3 rows'/>
        <Keyword style_name='datatype' name='dmat3x4' hint='double matrix with 3 columns and 4 rows'/>
        <Keyword style_name='datatype' name='dmat4' hint='double matrix with 4 columns and 4 rows'/>
        <Keyword style_name='datatype' name='dmat4x2' hint='double matrix with 4 columns and 2 rows'/>
        <Keyword style_name='datatype' name='dmat4x3' hint='double matrix with 4 columns and 3 rows'/>
        <Keyword style_name='datatype' name='dmat4x4' hint='double matrix with 4 columns and 4 rows'/>
        <Lexer type='layout' lexer='GlslLayoutLexer'>
          <Style theme='DarkTheme' name='qualifier' fore='#9589CC'/>
          <Style theme='LightTheme' name='qualifier' fore='#9589CC'/>
          <Keyword style_name='qualifier' name='offset'
                   hint='The byte offset of the member variable.'/>
        </Lexer>
      </Lexer>
      <Lexer type='function' lexer='GlslFunctionBodyLexer'>
        <Style theme='DarkTheme' name='keyword' fore='#3C81C1'/>
        <Style theme='DarkTheme' name='datatype' fore='#7AC0F4'/>
        <Style theme='DarkTheme' name='builtin' fore='#99B387'/>
        <Style theme='DarkTheme' name='function' fore='#61ABA9'/>
        <Style theme='DarkTheme' name='special' fore='#D57C30'/>
        <Style theme='LightTheme' name='keyword' fore='#3C81C1'/>
        <Style theme='LightTheme' name='datatype' fore='#7AC0F4'/>
        <Style theme='LightTheme' name='builtin' fore='#99B387'/>
        <Style theme='LightTheme' name='function' fore='#61ABA9'/>
        <Style theme='LightTheme' name='special' fore='#D57C30'/>
        <Keyword style_name='special' name='global' hint='Get the value of a global object variable before compiling the shader.
                                                         \  &lt;key&gt;global&lt;/key&gt;.name.variable'/>
        <Keyword style_name='function' name='abs'
                 hint='return the absolute value of the parameter
                      \  &lt;param&gt;genType &lt;/param&gt; &lt;key&gt;abs&lt;/key&gt;&lt;param&gt;(genType  x)&lt;/param&gt;
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;abs&lt;/key&gt;&lt;param&gt;(genIType x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;abs&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='acos'
                 hint='return the arccosine of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;acos&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='acosh'
                 hint='return the arc hyperbolic cosine of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;acosh&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='all'
                 hint='check whether all elements of a boolean vector are true
                      \  &lt;param&gt;bool&lt;/param&gt; &lt;key&gt;all&lt;/key&gt;&lt;param&gt;(bvec x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='any'
                 hint='check whether any element of a boolean vector is true
                      \  &lt;param&gt;bool&lt;/param&gt; &lt;key&gt;any&lt;/key&gt;&lt;param&gt;(bvec x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='asin'
                 hint='return the arcsine of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;asin&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='asinh'
                 hint='return the arc hyperbolic sine of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;asinh&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='atan' 
                 hint='return the arc-tangent of the parameters
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;atan&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='atanh'
                 hint='return the arc hyperbolic tangent of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;atanh&lt;/key&gt;&lt;param&gt; (genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='atomicAdd'
                 hint='perform an atomic addition to a variable
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;atomicAdd&lt;/key&gt;&lt;param&gt;(inout int  mem, int  data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;atomicAdd&lt;/key&gt;&lt;param&gt;(inout uint mem, uint data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='atomicAnd'
                 hint='perform an atomic logical AND operation to a variable
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;atomicAdd&lt;/key&gt;&lt;param&gt;(inout int  mem, int  data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;atomicAdd&lt;/key&gt;&lt;param&gt;(inout uint mem, uint data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='atomicCompSwap' 
                 hint='perform an atomic compare-exchange operation to a variable
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;atomicCompSwap&lt;/key&gt;&lt;param&gt;(inout int  mem, uint compare, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;atomicCompSwap&lt;/key&gt;&lt;param&gt;(inout uint mem, uint compare, uint data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='atomicCounter'
                 hint='return the current value of an atomic counter
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;atomicCounter&lt;/key&gt;&lt;param&gt;(atomic_uint c)&lt;/param&gt;'/>
        <Keyword style_name='function' name='atomicCounterDecrement'
                 hint='atomically decrement a counter and return the prior value
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;atomicCounterDecrement&lt;/key&gt;&lt;param&gt;(atomic_uint c)&lt;/param&gt;'/>
        <Keyword style_name='function' name='atomicCounterIncrement'
                 hint='atomically increment a counter and return the prior value
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;atomicCounterIncrement&lt;/key&gt;&lt;param&gt;(atomic_uint c)&lt;/param&gt;'/>
        <Keyword style_name='function' name='atomicExchange'
                 hint='perform an atomic exchange operation to a variable
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;atomicExchange&lt;/key&gt;&lt;param&gt;(inout int  mem, int  data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;atomicExchange&lt;/key&gt;&lt;param&gt;(inout uint mem, uint data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='atomicMax'
                 hint='perform an atomic max operation to a variable
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;atomicMax&lt;/key&gt;&lt;param&gt;(inout int  mem, int  data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;atomicMax&lt;/key&gt;&lt;param&gt;(inout uint mem, uint data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='atomicMin' 
                 hint='perform an atomic min operation to a variable
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;atomicMin&lt;/key&gt;&lt;param&gt;(inout int  mem, int  data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;atomicMin&lt;/key&gt;&lt;param&gt;(inout uint mem, uint data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='atomicOr'
                 hint='perform an atomic logical OR operation to a variable
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;atomicOr&lt;/key&gt;&lt;param&gt;(inout int  mem, int  data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;atomicOr&lt;/key&gt;&lt;param&gt;(inout uint mem, uint data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='atomicXor' 
                 hint='perform an atomic logical exclusive OR operation to a variable
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;atomicXor&lt;/key&gt;&lt;param&gt;(inout int  mem, int  data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;atomicXor&lt;/key&gt;&lt;param&gt;(inout uint mem, uint data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='barrier' 
                 hint='synchronize execution of multiple shader invocations
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;barrier&lt;/key&gt;&lt;param&gt;(void)&lt;/param&gt;'/>
        <Keyword style_name='function' name='bitCount' 
                 hint='counts the number of 1 bits in an integer
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;bitCount&lt;/key&gt;&lt;param&gt;(genIType value)&lt;/param&gt;
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;bitCount&lt;/key&gt;&lt;param&gt;(genUType value)&lt;/param&gt;'/>
        <Keyword style_name='function' name='bitfieldExtract' 
                 hint='extract a range of bits from an integer
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;bitfieldExtract&lt;/key&gt;&lt;param&gt;(genIType value, int offset, int bits)&lt;/param&gt;
                      \  &lt;param&gt;genUType&lt;/param&gt; &lt;key&gt;bitfieldExtract&lt;/key&gt;&lt;param&gt;(genUType value, int offset, int bits)&lt;/param&gt;'/>
        <Keyword style_name='function' name='bitfieldInsert' 
                 hint='insert a range of bits into an integer
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;bitfieldInsert&lt;/key&gt;&lt;param&gt;(genIType base, genIType insert, int offset, int bits)&lt;/param&gt;
                      \  &lt;param&gt;genUType&lt;/param&gt; &lt;key&gt;bitfieldInsert&lt;/key&gt;&lt;param&gt;(genUType base, genUType insert, int offset, int bits)&lt;/param&gt;'/>
        <Keyword style_name='function' name='bitfieldReverse' 
                 hint='reverse the order of bits in an integer
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;bitfieldReverse&lt;/key&gt;&lt;param&gt;(genIType value)&lt;/param&gt;
                      \  &lt;param&gt;genUType&lt;/param&gt; &lt;key&gt;bitfieldReverse&lt;/key&gt;&lt;param&gt;(genUType value)&lt;/param&gt;'/>
        <Keyword style_name='function' name='ceil' 
                 hint='find the nearest integer that is greater
                      \than or equal to the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;ceil&lt;/key&gt;&lt;param&gt;(genType  x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;ceil&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='clamp' 
                 hint='constrain a value to lie between two further values
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;clamp&lt;/key&gt;&lt;param&gt;(genType  x, genType minVal, genType maxVal)&lt;/param&gt;
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;clamp&lt;/key&gt;&lt;param&gt;(genType  x, float minVal, float maxVal)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;clamp&lt;/key&gt;&lt;param&gt;(genDType x, genDType minVal, genDType maxVal)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;clamp&lt;/key&gt;&lt;param&gt;(genDType x, double minVal, double maxVal)&lt;/param&gt;
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;clamp&lt;/key&gt;&lt;param&gt;(genIType x, genIType minVal, genIType maxVal)&lt;/param&gt;
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;clamp&lt;/key&gt;&lt;param&gt;(genIType x, int minVal, int maxVal)&lt;/param&gt;
                      \  &lt;param&gt;genUType&lt;/param&gt; &lt;key&gt;clamp&lt;/key&gt;&lt;param&gt;(genUType x, genUType minVal, genUType maxVal)&lt;/param&gt;
                      \  &lt;param&gt;genUType&lt;/param&gt; &lt;key&gt;clamp&lt;/key&gt;&lt;param&gt;(genUType x, uint minVal, uint maxVal)&lt;/param&gt;'/>
        <Keyword style_name='function' name='cos' 
                 hint='return the cosine of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;cos&lt;/key&gt;&lt;param&gt;(genType angle)&lt;/param&gt;'/>
        <Keyword style_name='function' name='cosh'
                 hint='return the hyperbolic cosine of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;cosh&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='cross' 
                 hint='calculate the cross product of two vectors
                      \  &lt;param&gt;vec3&lt;/param&gt; &lt;key&gt;cross&lt;/key&gt;&lt;param&gt;(vec3  x, vec3  y)&lt;/param&gt;
                      \  &lt;param&gt;dvec3&lt;/param&gt; &lt;key&gt;cross&lt;/key&gt;&lt;param&gt;(dvec3 x, dvec3 y)&lt;/param&gt;'/>
        <Keyword style_name='function' name='degrees' 
                 hint='convert a quantity in radians to degrees
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;degrees&lt;/key&gt;&lt;param&gt;(genType radians)&lt;/param&gt;'/>
        <Keyword style_name='function' name='determinant' 
                 hint='calculate the determinant of a matrix
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;determinant&lt;/key&gt;&lt;param&gt;(mat2 m)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;determinant&lt;/key&gt;&lt;param&gt;(mat3 m)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;determinant&lt;/key&gt;&lt;param&gt;(mat4 m)&lt;/param&gt;
                      \  &lt;param&gt;double&lt;/param&gt; &lt;key&gt;determinant&lt;/key&gt;&lt;param&gt;(dmat2 m)&lt;/param&gt;
                      \  &lt;param&gt;double&lt;/param&gt; &lt;key&gt;determinant&lt;/key&gt;&lt;param&gt;(dmat3 m)&lt;/param&gt;
                      \  &lt;param&gt;double&lt;/param&gt; &lt;key&gt;determinant&lt;/key&gt;&lt;param&gt;(dmat4 m)&lt;/param&gt;'/>
        <Keyword style_name='function' name='distance' 
                 hint='calculate the distance between two points
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;distance&lt;/key&gt;&lt;param&gt;(genType p0, genType p1)&lt;/param&gt;
                      \  &lt;param&gt;double&lt;/param&gt; &lt;key&gt;distance&lt;/key&gt;&lt;param&gt;(genDType p0, genDType p1)&lt;/param&gt;'/>
        <Keyword style_name='function' name='dot'
                 hint='calculate the dot product of two vectors
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;dot&lt;/key&gt;&lt;param&gt;(genType x, genType y)&lt;/param&gt;
                      \  &lt;param&gt;double&lt;/param&gt; &lt;key&gt;dot&lt;/key&gt;&lt;param&gt;(genDType x, genDType y)&lt;/param&gt;'/>
        <Keyword style_name='function' name='equal'
                 hint='perform a component-wise equal-to
                      \comparison of two vectors
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;equal&lt;/key&gt;&lt;param&gt;(vec x, vec y)&lt;/param&gt;
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;equal&lt;/key&gt;&lt;param&gt;(ivec x, ivec y)&lt;/param&gt;
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;equal&lt;/key&gt;&lt;param&gt;(uvec x, uvec y)&lt;/param&gt;'/>
        <Keyword style_name='function' name='exp' 
                 hint='return the natural exponentiation of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;exp&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='exp2'
                 hint='return 2 raised to the power of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;exp2&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='faceforward'
                 hint='return a vector pointing in the same direction as another
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;faceforward&lt;/key&gt;&lt;param&gt;(genType  N, genType  I, genType  Nref)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;faceforward&lt;/key&gt;&lt;param&gt;(genDType N, genDType I, genDType Nref)&lt;/param&gt;'/>
        <Keyword style_name='function' name='findLSB' 
                 hint='find the index of the least significant
                      \bit set to 1 in an integer
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;findLSB&lt;/key&gt;&lt;param&gt;(genIType value)&lt;/param&gt;
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;findLSB&lt;/key&gt;&lt;param&gt;(genUType value)&lt;/param&gt;'/>
        <Keyword style_name='function' name='findMSB'
                 hint='find the index of the most significant
                      \bit set to 1 in an integer
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;findMSB&lt;/key&gt;&lt;param&gt;(genIType value)&lt;/param&gt;
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;findMSB&lt;/key&gt;&lt;param&gt;(genUType value)&lt;/param&gt;'/>
        <Keyword style_name='function' name='floatBitsToInt'
                 hint='produce the encoding of a floating point value as an integer
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;floatBitsToInt&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='floatBitsToUint'
                 hint='produce the encoding of a floating point value as an unsigned integer
                      \  &lt;param&gt;genUType&lt;/param&gt; &lt;key&gt;floatBitsToUint&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='floor'
                 hint='find the nearest integer less than
                      \or equal to the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;floor&lt;/key&gt;&lt;param&gt;(genType  x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;floor&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='fma'
                 hint='perform a fused multiply-add operation (a * b + c)
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;fma&lt;/key&gt;&lt;param&gt;(genType  a, genType  b, genType  c)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;fma&lt;/key&gt;&lt;param&gt;(genDType a, genDType b, genDType c)&lt;/param&gt;'/>
        <Keyword style_name='function' name='fract'
                 hint='compute the fractional part of the argument
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;fract&lt;/key&gt;&lt;param&gt;(genType  x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;fract&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='frexp'
                 hint='split a floating point number
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;frexp&lt;/key&gt;&lt;param&gt;(genType  x, out genIType exp)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;frexp&lt;/key&gt;&lt;param&gt;(genDType x, out genIType exp)&lt;/param&gt;'/>
        <Keyword style_name='function' name='greaterThan'
                 hint='perform a component-wise greater-than
                      \comparison of two vectors
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;greaterThan&lt;/key&gt;&lt;param&gt;(vec x, vec y)&lt;/param&gt;
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;greaterThan&lt;/key&gt;&lt;param&gt;(ivec x, ivec y)&lt;/param&gt;
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;greaterThan&lt;/key&gt;&lt;param&gt;(uvec x, uvec y)&lt;/param&gt;'/>
        <Keyword style_name='function' name='greaterThanEqual'
                 hint='perform a component-wise greater-than-or-equal
                      \comparison of two vectors
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;greaterThanEqual&lt;/key&gt;&lt;param&gt;(vec x, vec y)&lt;/param&gt;
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;greaterThanEqual&lt;/key&gt;&lt;param&gt;(ivec x, ivec y)&lt;/param&gt;
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;greaterThanEqual&lt;/key&gt;&lt;param&gt;(uvec x, uvec y)&lt;/param&gt;'/>
        <Keyword style_name='function' name='groupMemoryBarrier'
                 hint='controls the ordering of memory transaction issued
                      \shader invocation relative to a work group
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;groupMemoryBarrier&lt;/key&gt;&lt;param&gt;(void)&lt;/param&gt;'/>
        <Keyword style_name='function' name='imageAtomicAdd'
                 hint='atomically add a value to an existing value in
                      \memory and return the original value
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage1D image, int P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimageCube image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage1DArray image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage2DArray image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage1D image, int P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimageCube image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gbufferImage image, int P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage1DArray image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage2DArray image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAdd&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, int data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='imageAtomicAnd' 
                 hint='atomically compute the logical AND of a value with an existing
                      \value in memory, store that value and return the original value
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage1D image, int P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimageCube image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gbufferImage image, int P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage1DArray image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage2DArray image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage1D image, int P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimageCube image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage1DArray image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage2DArray image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicAnd&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, int data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='imageAtomicCompSwap'
                 hint='atomically compares supplied data with that in memory and
                      \conditionally stores it to memory
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage1D image, int   P, uint compare, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, uint compare, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, uint compare, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, uint compare, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimageCube   image, ivec3 P, uint compare, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P, uint compare, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage1DArray   image, ivec2 P, uint compare, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage2DArray   image, ivec3 P, uint compare, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, uint compare, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, uint compare, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, uint compare, uint data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage1D image, int   P, int compare, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, int compare, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, int compare, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, int compare, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimageCube   image, ivec3 P, int compare, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P, int compare, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage1DArray   image, ivec2 P, int compare, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage2DArray   image, ivec3 P, int compare, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, int compare, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, int compare, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicCompSwap&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, int compare, int data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='imageAtomicExchange'
                 hint='atomically store supplied data into memory and
                      \return the original value from memory
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage1D image, int P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimageCube image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gbufferImage image, int P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage1DArray image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2DArray image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage1D image, int P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimageCube image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gbufferImage image, int P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage1DArray image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2DArray image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage1D image, int P, float data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, float data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, float data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, float data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimageCube image, ivec3 P, float data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gbufferImage image, int P, float data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage1DArray image, ivec2 P, float data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2DArray image, ivec3 P, float data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, float data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, float data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicExchange&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, float data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='imageAtomicMax' 
                 hint='atomically compute the minimum of a value with an existing
                      \value in memory, store that value and return the original value
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage1D image, int   P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimageCube   image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage1DArray   image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage2DArray   image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage1D image, int   P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimageCube   image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage1DArray   image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage2DArray   image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMax&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, int data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='imageAtomicMin' 
                 hint='atomically compute the minimum of a value with an existing
                      \value in memory, store that value and return the original value
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage1D image, int   P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimageCube   image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage1DArray   image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage2DArray   image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage1D image, int   P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimageCube   image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage1DArray   image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage2DArray   image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicMin&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, int data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='imageAtomicOr' 
                 hint='atomically compute the logical OR of a value with an existing
                      \value in memory, store that value and return the original value
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage1D image, int   P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimageCube   image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage1DArray   image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage2DArray   image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage1D image, int   P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimageCube   image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage1DArray   image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage2DArray   image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicOr&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, int data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='imageAtomicXor'
                 hint='atomically compute the logical exclusive OR of a value
                      \with an existing value in memory, store that value and
                      \return the original value
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage1D image, int   P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimageCube   image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage1DArray   image, ivec2 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage2DArray   image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, uint data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage1D image, int   P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimageCube   image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage1DArray   image, ivec2 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage2DArray   image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, int data)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageAtomicXor&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, int data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='imageLoad' 
                 hint='load a single texel from an image
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;imageLoad&lt;/key&gt;&lt;param&gt;(gimage1D image, int   P)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;imageLoad&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;imageLoad&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;imageLoad&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;imageLoad&lt;/key&gt;&lt;param&gt;(gimageCube   image, ivec3 P)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;imageLoad&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;imageLoad&lt;/key&gt;&lt;param&gt;(gimage1DArray   image, ivec2 P)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;imageLoad&lt;/key&gt;&lt;param&gt;(gimage2DArray   image, ivec3 P)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;imageLoad&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;imageLoad&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;imageLoad&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample)&lt;/param&gt;'/>
        <Keyword style_name='function' name='imageSamples'
                 hint='return the number of samples of an image
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageSamples&lt;/key&gt;&lt;param&gt;(gimage2DMS image)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageSamples&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image)&lt;/param&gt;'/>
        <Keyword style_name='function' name='imageSize'
                 hint='retrieve the dimensions of an image
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageSize&lt;/key&gt;&lt;param&gt;(gimage1D image)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;imageSize&lt;/key&gt;&lt;param&gt;(gimage2D image)&lt;/param&gt;
                      \  &lt;param&gt;ivec3&lt;/param&gt; &lt;key&gt;imageSize&lt;/key&gt;&lt;param&gt;(gimage3D image)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;imageSize&lt;/key&gt;&lt;param&gt;(gimageCube image)&lt;/param&gt;
                      \  &lt;param&gt;ivec3&lt;/param&gt; &lt;key&gt;imageSize&lt;/key&gt;&lt;param&gt;(gimageCubeArray image)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;imageSize&lt;/key&gt;&lt;param&gt;(gimageRect image)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;imageSize&lt;/key&gt;&lt;param&gt;(gimage1DArray image)&lt;/param&gt;
                      \  &lt;param&gt;ivec3&lt;/param&gt; &lt;key&gt;imageSize&lt;/key&gt;&lt;param&gt;(gimage2DArray image)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;imageSize&lt;/key&gt;&lt;param&gt;(gimageBuffer image)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;imageSize&lt;/key&gt;&lt;param&gt;(gimage2DMS image)&lt;/param&gt;
                      \  &lt;param&gt;ivec3&lt;/param&gt; &lt;key&gt;imageSize&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image)&lt;/param&gt;'/>
        <Keyword style_name='function' name='imageStore'
                 hint='write a single texel into an image
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;imageStore&lt;/key&gt;&lt;param&gt;(gimage1D image, int   P, gvec4 data)&lt;/param&gt;
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;imageStore&lt;/key&gt;&lt;param&gt;(gimage2D image, ivec2 P, gvec4 data)&lt;/param&gt;
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;imageStore&lt;/key&gt;&lt;param&gt;(gimage3D image, ivec3 P, gvec4 data)&lt;/param&gt;
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;imageStore&lt;/key&gt;&lt;param&gt;(gimage2DRect image, ivec2 P, gvec4 data)&lt;/param&gt;
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;imageStore&lt;/key&gt;&lt;param&gt;(gimageCube   image, ivec3 P, gvec4 data)&lt;/param&gt;
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;imageStore&lt;/key&gt;&lt;param&gt;(gbufferImage image, int   P, gvec4 data)&lt;/param&gt;
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;imageStore&lt;/key&gt;&lt;param&gt;(gimage1DArray   image, ivec2 P, gvec4 data)&lt;/param&gt;
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;imageStore&lt;/key&gt;&lt;param&gt;(gimage2DArray   image, ivec3 P, gvec4 data)&lt;/param&gt;
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;imageStore&lt;/key&gt;&lt;param&gt;(gimageCubeArray image, ivec3 P, gvec4 data)&lt;/param&gt;
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;imageStore&lt;/key&gt;&lt;param&gt;(gimage2DMS image, ivec2 P, int sample, gvec4 data)&lt;/param&gt;
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;imageStore&lt;/key&gt;&lt;param&gt;(gimage2DMSArray image, ivec3 P, int sample, gvec4 data)&lt;/param&gt;'/>
        <Keyword style_name='function' name='imulExtended'
                 hint='perform a 32- by 32-bit multiply to produce a 64-bit result
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;imulExtended&lt;/key&gt;&lt;param&gt;(genIType x, genIType y, out genIType msb, out genIType lsb)&lt;/param&gt;'/>
        <Keyword style_name='function' name='intBitsToFloat'
                 hint='produce a floating point using an
                      \encoding supplied as an integer
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;intBitsToFloat&lt;/key&gt;&lt;param&gt;(genIType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='interpolateAtCentroid'
                 hint='sample a varying at the centroid of a pixel
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;interpolateAtCentroid&lt;/key&gt;&lt;param&gt;(float interpolant)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;interpolateAtCentroid&lt;/key&gt;&lt;param&gt;(vec2  interpolant)&lt;/param&gt;
                      \  &lt;param&gt;vec3&lt;/param&gt; &lt;key&gt;interpolateAtCentroid&lt;/key&gt;&lt;param&gt;(vec3  interpolant)&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;interpolateAtCentroid&lt;/key&gt;&lt;param&gt;(vec4  interpolant)&lt;/param&gt;'/>
        <Keyword style_name='function' name='interpolateAtOffset'
                 hint='sample a varying at specified offset from the center of a pixel
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;interpolateAtOffset&lt;/key&gt;&lt;param&gt;(float interpolant, vec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;interpolateAtOffset&lt;/key&gt;&lt;param&gt;(vec2  interpolant, vec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;vec3&lt;/param&gt; &lt;key&gt;interpolateAtOffset&lt;/key&gt;&lt;param&gt;(vec3  interpolant, vec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;interpolateAtOffset&lt;/key&gt;&lt;param&gt;(vec4  interpolant, vec2 offset)&lt;/param&gt;'/>
        <Keyword style_name='function' name='interpolateAtSample'
                 hint='sample a varying at the location of a specified sample
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;interpolateAtSample&lt;/key&gt;&lt;param&gt;(float interpolant, int sample)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;interpolateAtSample&lt;/key&gt;&lt;param&gt;(vec2  interpolant, int sample)&lt;/param&gt;
                      \  &lt;param&gt;vec3&lt;/param&gt; &lt;key&gt;interpolateAtSample&lt;/key&gt;&lt;param&gt;(vec3  interpolant, int sample)&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;interpolateAtSample&lt;/key&gt;&lt;param&gt;(vec4  interpolant, int sample)&lt;/param&gt;'/>
        <Keyword style_name='function' name='inverse'
                 hint='calculate the inverse of a matrix
                      \  &lt;param&gt;mat2&lt;/param&gt; &lt;key&gt;inverse&lt;/key&gt;&lt;param&gt;(mat2  m)&lt;/param&gt;
                      \  &lt;param&gt;mat3&lt;/param&gt; &lt;key&gt;inverse&lt;/key&gt;&lt;param&gt;(mat3  m)&lt;/param&gt;
                      \  &lt;param&gt;mat4&lt;/param&gt; &lt;key&gt;inverse&lt;/key&gt;&lt;param&gt;(mat4  m)&lt;/param&gt;
                      \  &lt;param&gt;dmat2&lt;/param&gt; &lt;key&gt;inverse&lt;/key&gt;&lt;param&gt;(dmat2 m)&lt;/param&gt;
                      \  &lt;param&gt;dmat3&lt;/param&gt; &lt;key&gt;inverse&lt;/key&gt;&lt;param&gt;(dmat3 m)&lt;/param&gt;
                      \  &lt;param&gt;dmat4&lt;/param&gt; &lt;key&gt;inverse&lt;/key&gt;&lt;param&gt;(dmat4 m)&lt;/param&gt;'/>
        <Keyword style_name='function' name='inversesqrt'
                 hint='return the inverse of the square root of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;inversesqrt&lt;/key&gt;&lt;param&gt;(genType  x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;inversesqrt&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='isinf' 
                 hint='determine whether the parameter is positive or negative infinity
                      \  &lt;param&gt;genBType&lt;/param&gt; &lt;key&gt;isinf&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;
                      \  &lt;param&gt;genBType&lt;/param&gt; &lt;key&gt;isinf&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='isnan'
                 hint='determine whether the parameter is a number
                      \  &lt;param&gt;genBType&lt;/param&gt; &lt;key&gt;isnan&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;
                      \  &lt;param&gt;genBType&lt;/param&gt; &lt;key&gt;isnan&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='ldexp'
                 hint='assemble a floating point number from a value and exponent
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;ldexp&lt;/key&gt;&lt;param&gt;(genType  x, genIType exp)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;ldexp&lt;/key&gt;&lt;param&gt;(genDType x, genIType exp)&lt;/param&gt;'/>
        <Keyword style_name='function' name='length'
                 hint='calculate the length of a vector
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;length&lt;/key&gt;&lt;param&gt;(genType  x)&lt;/param&gt;
                      \  &lt;param&gt;double&lt;/param&gt; &lt;key&gt;length&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='lessThan'
                 hint='perform a component-wise less-than comparison of two vectors
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;lessThan&lt;/key&gt;&lt;param&gt;(vec  x, vec  y)&lt;/param&gt;
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;lessThan&lt;/key&gt;&lt;param&gt;(ivec x, ivec y)&lt;/param&gt;
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;lessThan&lt;/key&gt;&lt;param&gt;(uvec x, uvec y)&lt;/param&gt;'/>
        <Keyword style_name='function' name='lessThanEqual'
                 hint='perform a component-wise less-than-or-equal comparison of two vectors
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;lessThanEqual&lt;/key&gt;&lt;param&gt;(vec  x, vec  y)&lt;/param&gt;
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;lessThanEqual&lt;/key&gt;&lt;param&gt;(ivec x, ivec y)&lt;/param&gt;
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;lessThanEqual&lt;/key&gt;&lt;param&gt;(uvec x, uvec y)&lt;/param&gt;'/>
        <Keyword style_name='function' name='log' 
                 hint='return the natural logarithm of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;log&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='log2' 
                 hint='return the base 2 logarithm of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;log2&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='matrixCompMult' 
                 hint='perform a component-wise multiplication of two matrices
                      \  &lt;param&gt;mat&lt;/param&gt; &lt;key&gt;matrixCompMult&lt;/key&gt;&lt;param&gt;(mat  x, mat  y)&lt;/param&gt;
                      \  &lt;param&gt;dmat&lt;/param&gt; &lt;key&gt;matrixCompMult&lt;/key&gt;&lt;param&gt;(dmat x, dmat y)&lt;/param&gt;'/>
        <Keyword style_name='function' name='max'
                 hint='return the greater of two values
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;max&lt;/key&gt;&lt;param&gt;(genType  x, genType  y)&lt;/param&gt;
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;max&lt;/key&gt;&lt;param&gt;(genType  x, float    y)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;max&lt;/key&gt;&lt;param&gt;(genDType x, genDType y)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;max&lt;/key&gt;&lt;param&gt;(genDType x, double   y)&lt;/param&gt;
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;max&lt;/key&gt;&lt;param&gt;(genIType x, genIType y)&lt;/param&gt;
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;max&lt;/key&gt;&lt;param&gt;(genIType x, int      y)&lt;/param&gt;
                      \  &lt;param&gt;genUType&lt;/param&gt; &lt;key&gt;max&lt;/key&gt;&lt;param&gt;(genUType x, genUType y)&lt;/param&gt;
                      \  &lt;param&gt;genUType&lt;/param&gt; &lt;key&gt;max&lt;/key&gt;&lt;param&gt;(genUType x, uint     y)&lt;/param&gt;'/>
        <Keyword style_name='function' name='memoryBarrier' 
                 hint='controls the ordering of memory transactions
                      \issued by a single shader invocation
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;memoryBarrier&lt;/key&gt;&lt;param&gt;(void)&lt;/param&gt;'/>
        <Keyword style_name='function' name='memoryBarrierAtomicCounter' 
                 hint='controls the ordering of operations on atomic
                      \counters issued by a single shader invocation
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;memoryBarrierAtomicCounter&lt;/key&gt;&lt;param&gt;(void)&lt;/param&gt;'/>
        <Keyword style_name='function' name='memoryBarrierBuffer' 
                 hint='controls the ordering of operations on buffer
                      \variables issued by a single shader invocation
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;memoryBarrierBuffer&lt;/key&gt;&lt;param&gt;(void)&lt;/param&gt;'/>
        <Keyword style_name='function' name='memoryBarrierImage' 
                 hint='controls the ordering of operations on image
                      \variables issued by a single shader invocation
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;memoryBarrierImage&lt;/key&gt;&lt;param&gt;(void)&lt;/param&gt;'/>
        <Keyword style_name='function' name='memoryBarrierShared' 
                 hint='controls the ordering of operations on shared
                      \variables issued by a single shader invocation
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;memoryBarrierShared&lt;/key&gt;&lt;param&gt;(void)&lt;/param&gt;'/>
        <Keyword style_name='function' name='min' 
                 hint='return the lesser of two values
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;min&lt;/key&gt;&lt;param&gt;(genType  x, genType  y)&lt;/param&gt;
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;min&lt;/key&gt;&lt;param&gt;(genType  x, float    y)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;min&lt;/key&gt;&lt;param&gt;(genDType x, genDType y)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;min&lt;/key&gt;&lt;param&gt;(genDType x, double   y)&lt;/param&gt;
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;min&lt;/key&gt;&lt;param&gt;(genIType x, genIType y)&lt;/param&gt;
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;min&lt;/key&gt;&lt;param&gt;(genIType x, int      y)&lt;/param&gt;
                      \  &lt;param&gt;genUType&lt;/param&gt; &lt;key&gt;min&lt;/key&gt;&lt;param&gt;(genUType x, genUType y)&lt;/param&gt;
                      \  &lt;param&gt;genUType&lt;/param&gt; &lt;key&gt;min&lt;/key&gt;&lt;param&gt;(genUType x, uint     y)&lt;/param&gt;'/>
        <Keyword style_name='function' name='mix' 
                 hint='linearly interpolate between two values
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;mix&lt;/key&gt;&lt;param&gt;(genType  x, genType  y, genType  a)&lt;/param&gt;
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;mix&lt;/key&gt;&lt;param&gt;(genType  x, genType  y, float    a)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;mix&lt;/key&gt;&lt;param&gt;(genDType x, genDType y, genDType a)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;mix&lt;/key&gt;&lt;param&gt;(genDType x, genDType y, double   a)&lt;/param&gt;
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;mix&lt;/key&gt;&lt;param&gt;(genType  x, genType  y, genBType a)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;mix&lt;/key&gt;&lt;param&gt;(genDType x, genDType y, genBType a)&lt;/param&gt;
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;mix&lt;/key&gt;&lt;param&gt;(genIType x, genIType y, genBType a)&lt;/param&gt;
                      \  &lt;param&gt;genUType&lt;/param&gt; &lt;key&gt;mix&lt;/key&gt;&lt;param&gt;(genUType x, genUType y, genBType a)&lt;/param&gt;
                      \  &lt;param&gt;genBType&lt;/param&gt; &lt;key&gt;mix&lt;/key&gt;&lt;param&gt;(genBType x, genBType y, genBType a)&lt;/param&gt;'/>
        <Keyword style_name='function' name='mod'
                 hint='compute value of one parameter modulo another
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;mod&lt;/key&gt;&lt;param&gt;(genType  x, float    y)&lt;/param&gt;
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;mod&lt;/key&gt;&lt;param&gt;(genType  x, genType  y)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;mod&lt;/key&gt;&lt;param&gt;(genDType x, double   y)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;mod&lt;/key&gt;&lt;param&gt;(genDType x, genDType y)&lt;/param&gt;'/>
        <Keyword style_name='function' name='modf'
                 hint='separate a value into its integer and fractional components
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;modf&lt;/key&gt;&lt;param&gt;(genType  x, out genType  i)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;modf&lt;/key&gt;&lt;param&gt;(genDType x, out genDType i)&lt;/param&gt;'/>
        <Keyword style_name='function' name='noise1' 
                 hint='generate values with a pseudo-random noise function
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;noise1&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='noise2'
                 hint='generate values with a pseudo-random noise function
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;noise2&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='noise3'
                 hint='generate values with a pseudo-random noise function
                      \  &lt;param&gt;vec3 &lt;/param&gt; &lt;key&gt;noise3&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='noise4'
                 hint='generate values with a pseudo-random noise function
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;noise4&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='normalize' 
                 hint='calculate the normalize product of two vectors
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;normalize&lt;/key&gt;&lt;param&gt;(genType  v)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;normalize&lt;/key&gt;&lt;param&gt;(genDType v)&lt;/param&gt;'/>
        <Keyword style_name='function' name='not' 
                 hint='logically invert a boolean vector
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;not(bvec x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='notEqual' 
                 hint='perform a component-wise not-equal-to comparison of two vectors
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;notEqual&lt;/key&gt;&lt;param&gt;(vec x, vec y)&lt;/param&gt;
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;notEqual&lt;/key&gt;&lt;param&gt;(ivec x, ivec y)&lt;/param&gt;
                      \  &lt;param&gt;bvec&lt;/param&gt; &lt;key&gt;notEqual&lt;/key&gt;&lt;param&gt;(uvec x, uvec y)&lt;/param&gt;'/>
        <Keyword style_name='function' name='outerProduct' 
                 hint='calculate the outer product of a pair of vectors
                      \  &lt;param&gt;mat2&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(vec2  c, vec2  r)&lt;/param&gt;
                      \  &lt;param&gt;mat3&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(vec3  c, vec3  r)&lt;/param&gt;
                      \  &lt;param&gt;mat4&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(vec4  c, vec4  r)&lt;/param&gt;
                      \  &lt;param&gt;mat2x3&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(vec3  c, vec2  r)&lt;/param&gt;
                      \  &lt;param&gt;mat3x2&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(vec2  c, vec3  r)&lt;/param&gt;
                      \  &lt;param&gt;mat2x4&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(vec4  c, vec2  r)&lt;/param&gt;
                      \  &lt;param&gt;mat4x2&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(vec2  c, vec4  r)&lt;/param&gt;
                      \  &lt;param&gt;mat3x4&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(vec4  c, vec3  r)&lt;/param&gt;
                      \  &lt;param&gt;mat4x3&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(vec3  c, vec4  r)&lt;/param&gt;
                      \  &lt;param&gt;dmat2&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(dvec2 c, dvec2 r)&lt;/param&gt;
                      \  &lt;param&gt;dmat3&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(dvec3 c, dvec3 r)&lt;/param&gt;
                      \  &lt;param&gt;dmat4&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(dvec4 c, dvec4 r)&lt;/param&gt;
                      \  &lt;param&gt;dmat2x3&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(dvec3 c, dvec2 r)&lt;/param&gt;
                      \  &lt;param&gt;dmat3x2&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(dvec2 c, dvec3 r)&lt;/param&gt;
                      \  &lt;param&gt;dmat2x4&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(dvec4 c, dvec2 r)&lt;/param&gt;
                      \  &lt;param&gt;dmat4x2&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(dvec2 c, dvec4 r)&lt;/param&gt;
                      \  &lt;param&gt;dmat3x4&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(dvec4 c, dvec3 r)&lt;/param&gt;
                      \  &lt;param&gt;dmat4x3&lt;/param&gt; &lt;key&gt;outerProduct&lt;/key&gt;&lt;param&gt;(dvec3 c, dvec4 r)&lt;/param&gt;'/>
        <Keyword style_name='function' name='packDouble2x32'
                 hint='create a double-precision value
                      \from a pair of unsigned integers
                      \  &lt;param&gt;double&lt;/param&gt; &lt;key&gt;packDouble2x32&lt;/key&gt;&lt;param&gt;(uvec2 v)&lt;/param&gt;'/>
        <Keyword style_name='function' name='packHalf2x16' 
                 hint='convert two 32-bit floating-point
                      \quantities to16-bit quantities and
                      \pack them into a single 32-bit integer
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;packHalf2x16&lt;/key&gt;&lt;param&gt;(vec2 v)&lt;/param&gt;'/>
        <Keyword style_name='function' name='packSnorm2x16'
                 hint='pack floating-point values into an unsigned integer
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;packSnorm2x16&lt;/key&gt;&lt;param&gt;(vec2 v)&lt;/param&gt;'/>
        <Keyword style_name='function' name='packSnorm4x8'
                 hint='pack floating-point values into an unsigned integer
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;packSnorm4x8&lt;/key&gt;&lt;param&gt;(vec4 v)&lt;/param&gt;'/>
        <Keyword style_name='function' name='packUnorm2x16'
                 hint='pack floating-point values into an unsigned integer
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;packUnorm2x16&lt;/key&gt;&lt;param&gt;(vec2 v)&lt;/param&gt;'/>
        <Keyword style_name='function' name='packUnorm4x8'
                 hint='pack floating-point values into an unsigned integer
                      \  &lt;param&gt;uint&lt;/param&gt; &lt;key&gt;packUnorm4x8&lt;/key&gt;&lt;param&gt;(vec4 v)&lt;/param&gt;'/>
        <Keyword style_name='function' name='pow' 
                 hint='return the value of the first parameter raised to the power of the second
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;pow&lt;/key&gt;&lt;param&gt;(genType x, genType y)&lt;/param&gt;'/>
        <Keyword style_name='function' name='radians'
                 hint='convert a quantity in degrees to radians
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;radians&lt;/key&gt;&lt;param&gt;(genType degrees)&lt;/param&gt;'/>
        <Keyword style_name='function' name='reflect' 
                 hint='calculate the reflection direction for an incident vector
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;reflect&lt;/key&gt;&lt;param&gt;(genType  I, genType  N)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;reflect&lt;/key&gt;&lt;param&gt;(genDType I, genDType N)&lt;/param&gt;'/>
        <Keyword style_name='function' name='refract'
                 hint='calculate the refraction direction for an incident vector
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;refract&lt;/key&gt;&lt;param&gt;(genType  I, genType  N, float eta)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;refract&lt;/key&gt;&lt;param&gt;(genDType I, genDType N, float eta)&lt;/param&gt;'/>
        <Keyword style_name='function' name='round'
                 hint='find the nearest integer less than or equal to the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;round&lt;/key&gt;&lt;param&gt;(genType  x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;round&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='roundEven'
                 hint='find the nearest even integer to the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;roundEven&lt;/key&gt;&lt;param&gt;(genType  x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;roundEven&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='sign'
                 hint='extract the sign of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;sign&lt;/key&gt;&lt;param&gt;(genType  x)&lt;/param&gt;
                      \  &lt;param&gt;genIType&lt;/param&gt; &lt;key&gt;sign&lt;/key&gt;&lt;param&gt;(genIType x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;sign&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='sin'
                 hint='return the sine of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;sin&lt;/key&gt;&lt;param&gt;(genType  x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;sin&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='sinh'
                 hint='return the hyperbolic sine of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;sinh&lt;/key&gt;&lt;param&gt;(genType  x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;sinh&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='sqrt'
                 hint='return the square root of the parameter
                      \  &lt;param&gt;genType &lt;/param&gt; &lt;key&gt;sqrt&lt;/key&gt;&lt;param&gt;(genType  x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;sqrt&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='step'
                 hint='generate a step function by comparing two values
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;step&lt;/key&gt;&lt;param&gt;(genType edge, genType x)&lt;/param&gt;
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;step&lt;/key&gt;&lt;param&gt;(float edge, genType x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;step&lt;/key&gt;&lt;param&gt;(genDType edge, genDType x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;step&lt;/key&gt;&lt;param&gt;(double edge, genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='tan'
                 hint='return the tangent of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;tan&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='tanh'
                 hint='return the hyperbolic tangent of the parameter
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;tanh&lt;/key&gt;&lt;param&gt;(genType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='texelFetch'
                 hint='perform a lookup of a single texel within a texture
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetch&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, int P, int lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetch&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, ivec2 P, int lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetch&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, ivec3 P, int lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetch&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, ivec2 P)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetch&lt;/key&gt;&lt;param&gt;(gsampler1DArray sampler, ivec2 P, int lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetch&lt;/key&gt;&lt;param&gt;(gsampler2DArray sampler, ivec3 P, int lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetch&lt;/key&gt;&lt;param&gt;(gsamplerBuffer sampler, int P)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetch&lt;/key&gt;&lt;param&gt;(gsampler2DMS sampler, ivec2 P, int sample)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetch&lt;/key&gt;&lt;param&gt;(gsampler2DMSArray sampler, ivec3 P, int sample)&lt;/param&gt;'/>
        <Keyword style_name='function' name='texelFetchOffset'
                 hint='perform a lookup of a single texel within a texture with an offset
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetchOffset&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, int P, int lod, int offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetchOffset&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, ivec2 P, int lod, int offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetchOffset&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, ivec3 P, int lod, int offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetchOffset&lt;/key&gt;&lt;param&gt;(gsampler2DRect  sampler, ivec2 P, int offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetchOffset&lt;/key&gt;&lt;param&gt;(gsampler1DArray sampler, ivec2 P, int lod, int offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texelFetchOffset&lt;/key&gt;&lt;param&gt;(gsampler2DArray sampler, ivec3 P, int lod, int offset)&lt;/param&gt;'/>
        <Keyword style_name='function' name='texture'
                 hint='retrieves texels from a texture
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, float P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec2 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, vec3 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(gsamplerCube sampler, vec3  P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(sampler1DShadow sampler, vec3 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(sampler2DShadow sampler, vec3 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(samplerCubeShadow sampler, vec3 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(gsampler1DArray sampler, vec2 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(gsampler2DArray sampler, vec3 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(gsamplerCubeArray sampler, vec4 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(sampler1DArrayShadow sampler, vec3 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(gsampler2DArrayShadow sampler, vec4 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec2 P)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(sampler2DRectShadow sampler, vec3 P)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;texture&lt;/key&gt;&lt;param&gt;(gsamplerCubeArrayShadow sampler, vec4 P, float compare)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureGather'
                 hint='gathers four texels from a texture
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGather&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec2 P, [int comp])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGather&lt;/key&gt;&lt;param&gt;(gsampler2DArray sampler, vec3 P, [int comp])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGather&lt;/key&gt;&lt;param&gt;(gsamplerCube sampler, vec3 P, [int comp])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGather&lt;/key&gt;&lt;param&gt;(gsamplerCubeArray sampler, vec4 P, [int comp])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGather&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec3 P, [int comp])&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;textureGather&lt;/key&gt;&lt;param&gt;(gsampler2DShadow  sampler, vec2 P, float refZ)&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;textureGather&lt;/key&gt;&lt;param&gt;(gsampler2DArrayShadow sampler, vec3 P, float refZ)&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;textureGather&lt;/key&gt;&lt;param&gt;(gsamplerCubeShadow sampler, vec3 P, float refZ)&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;textureGather&lt;/key&gt;&lt;param&gt;(gsamplerCubeArrayShadow sampler, vec4 P, float refZ)&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;textureGather&lt;/key&gt;&lt;param&gt;(gsampler2DRectShadow sampler, vec3 P, float refZ)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureGatherOffset'
                 hint='gathers four texels from a texture with offset
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGatherOffset&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec2 P, ivec2 offset, [int comp])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGatherOffset&lt;/key&gt;&lt;param&gt;(gsampler2DArray sampler, vec3 P, ivec2 offset, [int comp])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGatherOffset&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec3 P, ivec2 offset, [int comp])&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;textureGatherOffset&lt;/key&gt;&lt;param&gt;(gsampler2DShadow sampler, vec2 P, float refZ, ivec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;textureGatherOffset&lt;/key&gt;&lt;param&gt;(gsampler2DArrayShadow sampler, vec3 P, float refZ, ivec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;textureGatherOffset&lt;/key&gt;&lt;param&gt;(gsampler2DRectShadow  sampler, vec3 P, float refZ, ivec2 offset)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureGatherOffsets'
                 hint='gathers four texels from a texture with an array of offsets
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGatherOffsets&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec2 P, ivec2 offsets[3], [int comp])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGatherOffsets&lt;/key&gt;&lt;param&gt;(gsampler2DArray sampler, vec3 P, ivec2 offsets[3], [int comp])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGatherOffsets&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec3 P, ivec2 offsets[3], [int comp])&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;textureGatherOffsets&lt;/key&gt;&lt;param&gt;(gsampler2DShadow sampler, vec2 P, float refZ, ivec2 offsets[3])&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;textureGatherOffsets&lt;/key&gt;&lt;param&gt;(gsampler2DArrayShadow sampler, vec3 P, float refZ, ivec2 offsets[3])&lt;/param&gt;
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;textureGatherOffsets&lt;/key&gt;&lt;param&gt;(gsampler2DRectShadow  sampler, vec3 P, float refZ, ivec2 offsets[3])&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureGrad'
                 hint='perform a texture lookup with explicit gradients
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGrad&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, float P, float dPdx, float dPdy)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGrad&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec2 P, vec2 dPdx, vec2 dPdy)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGrad&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, vec3 P, vec3 dPdx, vec3 dPdy)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGrad&lt;/key&gt;&lt;param&gt;(gsamplerCube sampler, vec3 P, vec3 dPdx, vec3 dPdy)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGrad&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec2 P, vec2 dPdx, vec2 dPdy)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureGrad&lt;/key&gt;&lt;param&gt;(gsampler2DRectShadow sampler, vec2 P, vec2  dPdx, vec2 dPdy)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureGrad&lt;/key&gt;&lt;param&gt;(sampler1DShadow sampler, vec3 P, float dPdx, float dPdy)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureGrad&lt;/key&gt;&lt;param&gt;(sampler2DShadow sampler, vec3 P, vec2 dPdx, vec2 dPdy)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGrad&lt;/key&gt;&lt;param&gt;(gsampler1DArray sampler, vec2 P, float dPdx, float dPdy)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGrad&lt;/key&gt;&lt;param&gt;(gsampler2DArray sampler, vec3 P, vec2 dPdx, vec2 dPdy)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureGrad&lt;/key&gt;&lt;param&gt;(sampler1DArrayShadow sampler, vec3 P, float dPdx, float dPdy)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureGrad&lt;/key&gt;&lt;param&gt;(gsamplerCubeArray sampler, vec4  P, vec3 dPdx, vec3 dPdy)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureLod'
                 hint='perform a texture lookup with explicit level-of-detail
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureLod&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, float P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureLod&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec2 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureLod&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, vec3 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureLod&lt;/key&gt;&lt;param&gt;(gsamplerCube sampler, vec3 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureLod&lt;/key&gt;&lt;param&gt;(sampler1DShadow sampler, vec3 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureLod&lt;/key&gt;&lt;param&gt;(sampler2DShadow sampler, vec4 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureLod&lt;/key&gt;&lt;param&gt;(gsampler1DArray sampler, vec2 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureLod&lt;/key&gt;&lt;param&gt;(gsampler2DArray sampler, vec3 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureLod&lt;/key&gt;&lt;param&gt;(sampler1DArrayShadow sampler, vec3 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureLod&lt;/key&gt;&lt;param&gt;(gsamplerCubeArray sampler, vec4 P, float lod)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureOffset'
                 hint='perform a texture lookup with offset
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureOffset&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, float P, int offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureOffset&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec2 P, ivec2 offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureOffset&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, vec3 P, ivec3 offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureOffset&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec2 P, ivec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureOffset&lt;/key&gt;&lt;param&gt;(sampler2DRectShadow  sampler, vec3  P, ivec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureOffset&lt;/key&gt;&lt;param&gt;(sampler1DShadow sampler, vec3 P, int offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureOffset&lt;/key&gt;&lt;param&gt;(sampler2DShadow sampler, vec4 P, ivec2 offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureOffset&lt;/key&gt;&lt;param&gt;(gsampler1DArray sampler, vec2 P, int offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureOffset&lt;/key&gt;&lt;param&gt;(gsampler2DArray sampler, vec3 P, ivec2 offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureOffset&lt;/key&gt;&lt;param&gt;(sampler1DArrayShadow sampler, vec3 P, int offset)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureOffset&lt;/key&gt;&lt;param&gt;(sampler2DArrayShadow sampler, vec4 P, vec2 offset)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureProj'
                 hint='perform a texture lookup with projection
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;textureProj&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, vec2 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProj&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, vec4 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProj&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec3 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProj&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec4 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProj&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, vec4 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProj&lt;/key&gt;&lt;param&gt;(sampler1DShadow sampler, vec4 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProj&lt;/key&gt;&lt;param&gt;(sampler2DShadow sampler, vec4 P, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProj&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec3 P)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProj&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec4 P)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProj&lt;/key&gt;&lt;param&gt;(gsampler2DRectShadow sampler, vec4 P)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureProjGrad'
                 hint='perform a texture lookup with projection and explicit gradients
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGrad&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, vec2 P, float pDx, float pDy)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGrad&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, vec4 P, float pDx, float pDy)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGrad&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec3 P, vec2 pDx, vec2 pDy)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGrad&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec4 P, vec2 pDx, vec2 pDy)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGrad&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, vec4 P, vec3 pDx, vec3 pDy)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProjGrad&lt;/key&gt;&lt;param&gt;(sampler1DShadow sampler, vec4 P, float pDx, float pDy)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProjGrad&lt;/key&gt;&lt;param&gt;(sampler2DShadow sampler, vec4 P, vec2 pDx, vec2 pDy)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGrad&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec3 P, vec2 pDx, vec2 pDy)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGrad&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec4 P, vec2 pDx, vec2 pDy)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProjGrad&lt;/key&gt;&lt;param&gt;(gsampler2DRectShadow sampler, vec4 P, vec2 pDx, vec2 pDy)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureProjGradOffset'
                 hint='perform a texture lookup with projection, explicit gradients and offset
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGradOffset&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, vec2 P, float dPdx, float dPdy, int offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGradOffset&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, vec4 P, float dPdx, float dPdy, int offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGradOffset&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec3 P, vec2 dPdx, vec2 dPdy, ivec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGradOffset&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec4 P, vec2 dPdx, vec2 dPdy, ivec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGradOffset&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, vec4 P, vec3 dPdx, vec3 dPdy, ivec3 offset)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProjGradOffset&lt;/key&gt;&lt;param&gt;(sampler1DShadow sampler, vec4 P, float dPdx, float dPdy, int offset)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProjGradOffset&lt;/key&gt;&lt;param&gt;(sampler2DShadow sampler, vec4 P, vec2 dPdx, vec2 dPdy, ivec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGradOffset&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec3 P, vec2 dPdx, vec2 dPdy, ivec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjGradOffset&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec4 P, vec2 dPdx, vec2 dPdy, ivec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProjGradOffset&lt;/key&gt;&lt;param&gt;(gsampler2DRectShadow sampler, vec4 P, vec2 dPdx, vec2 dPdy, ivec2 offset)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureProjLod'
                 hint='perform a texture lookup with projection and explicit level-of-detail
                      \  &lt;param&gt;vec4&lt;/param&gt; &lt;key&gt;textureProjLod&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, vec2 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjLod&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, vec4 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjLod&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec3 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjLod&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec4 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjLod&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, vec4 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProjLod&lt;/key&gt;&lt;param&gt;(sampler1DShadow sampler, vec4 P, float lod)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProjLod&lt;/key&gt;&lt;param&gt;(sampler2DShadow sampler, vec4 P, float lod)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureProjLodOffset'
                 hint='perform a texture lookup with projection and explicit level-of-detail and offset
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjLodOffset&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, vec2 P, float lod, int offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjLodOffset&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, vec4 P, float lod, int offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjLodOffset&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec3 P, float lod, ivec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjLodOffset&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec4 P, float lod, ivec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjLodOffset&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, vec4 P, float lod, ivec3 offset)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProjLodOffset&lt;/key&gt;&lt;param&gt;(sampler1DShadow sampler, vec4 P, float lod, int   offset)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProjLodOffset&lt;/key&gt;&lt;param&gt;(sampler2DShadow sampler, vec4 P, float lod, ivec2 offset)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureProjOffset'
                 hint='perform a texture lookup with projection and offset
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjOffset&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, vec2 P, int offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjOffset&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, vec4 P, int offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjOffset&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec3 P, ivec2 offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjOffset&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec4 P, ivec2 offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjOffset&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, vec4 P, ivec3 offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProjOffset&lt;/key&gt;&lt;param&gt;(sampler1DShadow sampler, vec4 P, int   offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProjOffset&lt;/key&gt;&lt;param&gt;(sampler2DShadow sampler, vec4 P, ivec2 offset, [float bias])&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjOffset&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec3 P, ivec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;gvec4&lt;/param&gt; &lt;key&gt;textureProjOffset&lt;/key&gt;&lt;param&gt;(gsampler2DRect sampler, vec4 P, ivec2 offset)&lt;/param&gt;
                      \  &lt;param&gt;float&lt;/param&gt; &lt;key&gt;textureProjOffset&lt;/key&gt;&lt;param&gt;(gsampler2DRectShadow sampler, vec4 P, ivec2 offset)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureQueryLevels'
                 hint='compute the number of accessible mipmap levels of a texture
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureQueryLevels&lt;/key&gt;&lt;param&gt;(gsampler1D sampler)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureQueryLevels&lt;/key&gt;&lt;param&gt;(gsampler2D sampler)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureQueryLevels&lt;/key&gt;&lt;param&gt;(gsampler3D sampler)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureQueryLevels&lt;/key&gt;&lt;param&gt;(gsamplerCube sampler)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureQueryLevels&lt;/key&gt;&lt;param&gt;(gsampler1DArray sampler)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureQueryLevels&lt;/key&gt;&lt;param&gt;(gsampler2DDArray sampler)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureQueryLevels&lt;/key&gt;&lt;param&gt;(gsamplerCubeArray sampler)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureQueryLevels&lt;/key&gt;&lt;param&gt;(gsampler1DShadow sampler)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureQueryLevels&lt;/key&gt;&lt;param&gt;(gsampler2DShadow sampler)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureQueryLevels&lt;/key&gt;&lt;param&gt;(gsamplerCubeShadow sampler)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureQueryLevels&lt;/key&gt;&lt;param&gt;(gsampler1DArrayShadow sampler)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureQueryLevels&lt;/key&gt;&lt;param&gt;(gsampler2DArrayShadow sampler)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureQueryLevels&lt;/key&gt;&lt;param&gt;(gsamplerCubeArrayShadow sampler)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureQueryLod'
                 hint='compute the level-of-detail that would be used to sample from a texture
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;textureQueryLod&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, float P)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;textureQueryLod&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, vec2  P)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;textureQueryLod&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, vec3  P)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;textureQueryLod&lt;/key&gt;&lt;param&gt;(gsamplerCube sampler, vec3  P)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;textureQueryLod&lt;/key&gt;&lt;param&gt;(gsampler1DArray sampler, float P)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;textureQueryLod&lt;/key&gt;&lt;param&gt;(gsampler2DDArray sampler, vec2  P)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;textureQueryLod&lt;/key&gt;&lt;param&gt;(gsamplerCubeArray sampler, vec3  P)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;textureQueryLod&lt;/key&gt;&lt;param&gt;(gsampler1DShadow sampler, float P)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;textureQueryLod&lt;/key&gt;&lt;param&gt;(gsampler2DShadow sampler, vec2  P)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;textureQueryLod&lt;/key&gt;&lt;param&gt;(gsamplerCubeShadow sampler, vec3  P)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;textureQueryLod&lt;/key&gt;&lt;param&gt;(gsampler1DArrayShadow sampler, float P)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;textureQueryLod&lt;/key&gt;&lt;param&gt;(gsampler2DArrayShadow sampler, vec2  P)&lt;/param&gt;
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;textureQueryLod&lt;/key&gt;&lt;param&gt;(gsamplerCubeArrayShadow sampler, vec3  P)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureSamples'
                 hint='return the number of samples of a texture
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureSamples&lt;/key&gt;&lt;param&gt;(gsampler2DMS sampler)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureSamples&lt;/key&gt;&lt;param&gt;(gsampler2DMSArray sampler)&lt;/param&gt;'/>
        <Keyword style_name='function' name='textureSize'
                 hint='retrieve the dimensions of a level of a texture
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(gsampler1D sampler, int lod)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(gsampler2D sampler, int lod)&lt;/param&gt;
                      \  &lt;param&gt;ivec3&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(gsampler3D sampler, int lod)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(gsamplerCube sampler, int lod)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(sampler1DShadow sampler, int lod)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(sampler2DShadow sampler, int lod)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(samplerCubeShadow sampler, int lod)&lt;/param&gt;
                      \  &lt;param&gt;ivec3&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(samplerCubeArray sampler, int lod)&lt;/param&gt;
                      \  &lt;param&gt;ivec3&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(samplerCubeArrayShadow sampler, int lod)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(gsamplerRect sampler)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(gsamplerRectShadow sampler)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(gsampler1DArray sampler, int lod)&lt;/param&gt;
                      \  &lt;param&gt;ivec3&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(gsampler2DArray sampler, int lod)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(sampler1DArrayShadow sampler, int lod)&lt;/param&gt;
                      \  &lt;param&gt;ivec3&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(sampler2DArrayShadow sampler, int lod)&lt;/param&gt;
                      \  &lt;param&gt;int&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(gsamplerBuffer sampler)&lt;/param&gt;
                      \  &lt;param&gt;ivec2&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(gsampler2DMS sampler)&lt;/param&gt;
                      \  &lt;param&gt;ivec3&lt;/param&gt; &lt;key&gt;textureSize&lt;/key&gt;&lt;param&gt;(gsampler2DMSArray sampler)&lt;/param&gt;'/>
        <Keyword style_name='function' name='transpose'
                 hint='calculate the transpose of a matrix
                      \  &lt;param&gt;mat2&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(mat2    m)&lt;/param&gt;
                      \  &lt;param&gt;mat3&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(mat3    m)&lt;/param&gt;
                      \  &lt;param&gt;mat4&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(mat4    m)&lt;/param&gt;
                      \  &lt;param&gt;mat2x3&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(mat3x2  m)&lt;/param&gt;
                      \  &lt;param&gt;mat2x4&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(mat4x2  m)&lt;/param&gt;
                      \  &lt;param&gt;mat3x2&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(mat2x3  m)&lt;/param&gt;
                      \  &lt;param&gt;mat3x4&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(mat4x3  m)&lt;/param&gt;
                      \  &lt;param&gt;mat4x2&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(mat2x4  m)&lt;/param&gt;
                      \  &lt;param&gt;mat4x3&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(mat3x4  m)&lt;/param&gt;
                      \  &lt;param&gt;dmat2&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(dmat2   m)&lt;/param&gt;
                      \  &lt;param&gt;dmat3&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(dmat3   m)&lt;/param&gt;
                      \  &lt;param&gt;dmat4&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(dmat4   m)&lt;/param&gt;
                      \  &lt;param&gt;dmat2x3&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(dmat3x2 m)&lt;/param&gt;
                      \  &lt;param&gt;dmat2x4&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(dmat4x2 m)&lt;/param&gt;
                      \  &lt;param&gt;dmat3x2&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(dmat2x3 m)&lt;/param&gt;
                      \  &lt;param&gt;dmat3x4&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(dmat4x3 m)&lt;/param&gt;
                      \  &lt;param&gt;dmat4x2&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(dmat2x4 m)&lt;/param&gt;
                      \  &lt;param&gt;dmat4x3&lt;/param&gt; &lt;key&gt;transpose&lt;/key&gt;&lt;param&gt;(dmat3x4 m)&lt;/param&gt;'/>
        <Keyword style_name='function' name='trunc'
                 hint='find the nearest integer less
                      \than or equal to the parameter
                      \  &lt;param&gt;genType &lt;/param&gt; &lt;key&gt;trunc&lt;/key&gt;&lt;param&gt;(genType  x)&lt;/param&gt;
                      \  &lt;param&gt;genDType&lt;/param&gt; &lt;key&gt;trunc&lt;/key&gt;&lt;param&gt;(genDType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='uaddCarry'
                 hint='Add unsigned integers and generate carry. The
                      \carry result is the sum of x and y modulo 2^32.
                      \  &lt;param&gt;genUType&lt;/param&gt; &lt;key&gt;uaddCarry&lt;/key&gt;&lt;param&gt;(genUType x, genUType y, out genUType carry)&lt;/param&gt;'/>
        <Keyword style_name='function' name='uintBitsToFloat'
                 hint='produce a floating point using an
                      \encoding supplied as an integer
                      \  &lt;param&gt;genType&lt;/param&gt; &lt;key&gt;uintBitsToFloat&lt;/key&gt;&lt;param&gt;(genUType x)&lt;/param&gt;'/>
        <Keyword style_name='function' name='umulExtended'
                 hint='perform a 32- by 32-bit multiply to produce a 64-bit result
                      \  &lt;param&gt;void&lt;/param&gt; &lt;key&gt;umulExtended&lt;/key&gt;&lt;param&gt;(genIType x, genIType y, out genIType msb, out genIType lsb)&lt;/param&gt;'/>
        <Keyword style_name='function' name='unpackDouble2x32'
                 hint='produce two unsigned integers containing the bit
                      \encoding of a double precision floating point value
                      \  &lt;param&gt;uvec2&lt;/param&gt; &lt;key&gt;unpackDouble2x32&lt;/key&gt;&lt;param&gt;(double d)&lt;/param&gt;'/>
        <Keyword style_name='function' name='unpackHalf2x16'
                 hint='convert two 16-bit floating-point values
                      \packed into a single 32-bit integer into a
                      \vector of two 32-bit floating-point quantities
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;unpackHalf2x16&lt;/key&gt;&lt;param&gt;(uint v)&lt;/param&gt;'/>
        <Keyword style_name='function' name='unpackSnorm2x16'
                 hint='unpack floating-point values from an unsigned integer
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;unpackUnorm2x16&lt;/key&gt;&lt;param&gt;(uint p)&lt;/param&gt;'/>
        <Keyword style_name='function' name='unpackSnorm4x8'
                 hint='unpack floating-point values from an unsigned integer
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;unpackSnorm4x8&lt;/key&gt;&lt;param&gt;(uint p)&lt;/param&gt;'/>
        <Keyword style_name='function' name='unpackUnorm2x16'
                 hint='unpack floating-point values from an unsigned integer
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;unpackUnorm2x16&lt;/key&gt;&lt;param&gt;(uint p)&lt;/param&gt;'/>
        <Keyword style_name='function' name='unpackUnorm4x8'
                 hint='unpack floating-point values from an unsigned integer
                      \  &lt;param&gt;vec2&lt;/param&gt; &lt;key&gt;unpackUnorm4x8&lt;/key&gt;&lt;param&gt;(uint p)&lt;/param&gt;'/>
        <Keyword style_name='function' name='usubBorrow'
                 hint='subtract unsigned integers and generate borrow
                      \  &lt;param&gt;genUType&lt;/param&gt; &lt;key&gt;usubBorrow&lt;/key&gt;&lt;param&gt;(genUType x, genUType y, out genUType borrow)&lt;/param&gt;'/>
        <Keyword style_name='keyword' name='const' hint='Specify a constant variable indicating
                                                        \that the variable will not change.'/>
        <Keyword style_name='keyword' name='if'/>
        <Keyword style_name='keyword' name='else'/>
        <Keyword style_name='keyword' name='switch'/>
        <Keyword style_name='keyword' name='case'/>
        <Keyword style_name='keyword' name='for'/>
        <Keyword style_name='keyword' name='do'/>
        <Keyword style_name='keyword' name='while'/>
        <Keyword style_name='keyword' name='break'/>
        <Keyword style_name='keyword' name='continue'/>
        <Keyword style_name='keyword' name='return'/>
        <Keyword style_name='keyword' name='discard' hint='FS ONLY: Do not pass the fragment on to the framebuffer.'/>
        <Keyword style_name='datatype' name='void'/>
        <Keyword style_name='datatype' name='bool'/>
        <Keyword style_name='datatype' name='int'/>
        <Keyword style_name='datatype' name='uint'/>
        <Keyword style_name='datatype' name='float'/>
        <Keyword style_name='datatype' name='atomic_uint'/>
        <Keyword style_name='datatype' name='bvec2' hint='bool vector with 2 components'/>
        <Keyword style_name='datatype' name='bvec3' hint='bool vector with 3 components'/>
        <Keyword style_name='datatype' name='bvec4' hint='bool vector with 4 components'/>
        <Keyword style_name='datatype' name='ivec2' hint='int vector with 2 components'/>
        <Keyword style_name='datatype' name='ivec3' hint='int vector with 3 components'/>
        <Keyword style_name='datatype' name='ivec4' hint='int vector with 4 components'/>
        <Keyword style_name='datatype' name='uvec2' hint='unsigned int vector with 2 components'/>
        <Keyword style_name='datatype' name='uvec3' hint='unsigned int vector with 3 components'/>
        <Keyword style_name='datatype' name='uvec4' hint='unsigned int vector with 4 components'/>
        <Keyword style_name='datatype' name='vec2' hint='float vector with 2 components'/>
        <Keyword style_name='datatype' name='vec3' hint='float vector with 3 components'/>
        <Keyword style_name='datatype' name='vec4' hint='float vector with 4 components'/>
        <Keyword style_name='datatype' name='dvec2' hint='double vector with 2 components'/>
        <Keyword style_name='datatype' name='dvec3' hint='double vector with 3 components'/>
        <Keyword style_name='datatype' name='dvec4' hint='double vector with 4 components'/>
        <Keyword style_name='datatype' name='mat2' hint='float matrix with 2 columns and 2 rows'/>
        <Keyword style_name='datatype' name='mat2x2' hint='float matrix with 2 columns and 2 rows'/>
        <Keyword style_name='datatype' name='mat2x3' hint='float matrix with 2 columns and 3 rows'/>
        <Keyword style_name='datatype' name='mat2x4' hint='float matrix with 2 columns and 4 rows'/>
        <Keyword style_name='datatype' name='mat3' hint='float matrix with 3 columns and 3 rows'/>
        <Keyword style_name='datatype' name='mat3x2' hint='float matrix with 3 columns and 2 rows'/>
        <Keyword style_name='datatype' name='mat3x3' hint='float matrix with 3 columns and 3 rows'/>
        <Keyword style_name='datatype' name='mat3x4' hint='float matrix with 3 columns and 4 rows'/>
        <Keyword style_name='datatype' name='mat4' hint='float matrix with 4 columns and 4 rows'/>
        <Keyword style_name='datatype' name='mat4x2' hint='float matrix with 4 columns and 2 rows'/>
        <Keyword style_name='datatype' name='mat4x3' hint='float matrix with 4 columns and 3 rows'/>
        <Keyword style_name='datatype' name='mat4x4' hint='float matrix with 4 columns and 4 rows'/>
        <Keyword style_name='datatype' name='dmat2' hint='double matrix with 2 columns and 2 rows'/>
        <Keyword style_name='datatype' name='dmat2x2' hint='double matrix with 2 columns and 2 rows'/>
        <Keyword style_name='datatype' name='dmat2x3' hint='double matrix with 2 columns and 3 rows'/>
        <Keyword style_name='datatype' name='dmat2x4' hint='double matrix with 2 columns and 4 rows'/>
        <Keyword style_name='datatype' name='dmat3' hint='double matrix with 3 columns and 3 rows'/>
        <Keyword style_name='datatype' name='dmat3x2' hint='double matrix with 3 columns and 2 rows'/>
        <Keyword style_name='datatype' name='dmat3x3' hint='double matrix with 3 columns and 3 rows'/>
        <Keyword style_name='datatype' name='dmat3x4' hint='double matrix with 3 columns and 4 rows'/>
        <Keyword style_name='datatype' name='dmat4' hint='double matrix with 4 columns and 4 rows'/>
        <Keyword style_name='datatype' name='dmat4x2' hint='double matrix with 4 columns and 2 rows'/>
        <Keyword style_name='datatype' name='dmat4x3' hint='double matrix with 4 columns and 3 rows'/>
        <Keyword style_name='datatype' name='dmat4x4' hint='double matrix with 4 columns and 4 rows'/>
        <Keyword style_name='builtin' name='gl_VertexID'/>
        <Keyword style_name='builtin' name='gl_InstanceID'/>
        <Keyword style_name='builtin' name='gl_Position'/>
        <Keyword style_name='builtin' name='gl_PointSize'/>
        <Keyword style_name='builtin' name='gl_ClipDistance'/>
        <Keyword style_name='builtin' name='gl_TessLevelOuter'/>
        <Keyword style_name='builtin' name='gl_TessLevelInner'/>
        <Keyword style_name='builtin' name='gl_TessCoord'/>
        <Keyword style_name='builtin' name='gl_PatchVerticesIn'/>
        <Keyword style_name='builtin' name='gl_PrimitiveID'/>
        <Keyword style_name='builtin' name='gl_PrimitiveIDIn'/>
        <Keyword style_name='builtin' name='gl_InvocationID'/>
        <Keyword style_name='builtin' name='gl_Layer'/>
        <Keyword style_name='builtin' name='gl_ViewportIndex'/>
        <Keyword style_name='builtin' name='gl_FragCoord'/>
        <Keyword style_name='builtin' name='gl_FrontFacing'/>
        <Keyword style_name='builtin' name='gl_PointCoord'/>
        <Keyword style_name='builtin' name='gl_SampleID'/>
        <Keyword style_name='builtin' name='gl_SamplePosition'/>
        <Keyword style_name='builtin' name='gl_SampleMaskIn'/>
        <Keyword style_name='builtin' name='gl_FragDepth'/>
        <Keyword style_name='builtin' name='gl_NumWorkGroups'/>
        <Keyword style_name='builtin' name='gl_WorkGroupID'/>
        <Keyword style_name='builtin' name='gl_LocalInvocationID'/>
        <Keyword style_name='builtin' name='gl_GlobalInvocationID'/>
        <Keyword style_name='builtin' name='gl_LocalInvocationIndex'/>
        <Keyword style_name='builtin' name='gl_WorkGroupSize'/>
        <Keyword style_name='builtin' name='gl_DepthRangeParameters'/>
        <Keyword style_name='builtin' name='gl_MaxVertexAttribs​'/>
        <Keyword style_name='builtin' name='gl_MaxVertexOutputComponents'/>
        <Keyword style_name='builtin' name='gl_MaxVertexUniformComponents'/>
        <Keyword style_name='builtin' name='gl_MaxVertexTextureImageUnits'/>
        <Keyword style_name='builtin' name='gl_MaxGeometryInputComponents'/>
        <Keyword style_name='builtin' name='gl_MaxGeometryOutputComponents'/>
        <Keyword style_name='builtin' name='gl_MaxGeometryUniformComponents'/>
        <Keyword style_name='builtin' name='gl_MaxGeometryTextureImageUnits​'/>
        <Keyword style_name='builtin' name='gl_MaxGeometryOutputVertices​'/>
        <Keyword style_name='builtin' name='gl_MaxGeometryTotalOutputComponents'/>
        <Keyword style_name='builtin' name='gl_MaxGeometryVaryingComponents'/>
        <Keyword style_name='builtin' name='gl_MaxFragmentInputComponents'/>
        <Keyword style_name='builtin' name='gl_MaxDrawBuffers'/>
        <Keyword style_name='builtin' name='gl_MaxFragmentUniformComponents​'/>
        <Keyword style_name='builtin' name='gl_MaxTextureImageUnits​'/>
        <Keyword style_name='builtin' name='gl_MaxClipDistances'/>
        <Keyword style_name='builtin' name='gl_MaxCombinedTextureImageUnits​'/>
        <Keyword style_name='builtin' name='gl_MaxTessControlInputComponents'/>
        <Keyword style_name='builtin' name='gl_MaxTessControlOutputComponents'/>
        <Keyword style_name='builtin' name='gl_MaxTessControlUniformComponents'/>
        <Keyword style_name='builtin' name='gl_MaxTessControlTextureImageUnits'/>
        <Keyword style_name='builtin' name='gl_MaxTessControlTotalOutputComponents'/>
        <Keyword style_name='builtin' name='gl_MaxTessEvaluationInputComponents'/>
        <Keyword style_name='builtin' name='gl_MaxTessEvaluationOutputComponents'/>
        <Keyword style_name='builtin' name='gl_MaxTessEvaluationUniformComponents'/>
        <Keyword style_name='builtin' name='gl_MaxTessEvaluationTextureImageUnits'/>
        <Keyword style_name='builtin' name='gl_MaxTessPatchComponents'/>
        <Keyword style_name='builtin' name='gl_MaxPatchVertices'/>
        <Keyword style_name='builtin' name='gl_MaxTessGenLevel'/>
        <Keyword style_name='builtin' name='gl_MaxViewports'/>
        <Keyword style_name='builtin' name='gl_MaxVertexUniformVectors'/>
        <Keyword style_name='builtin' name='gl_MaxFragmentUniformVectors'/>
        <Keyword style_name='builtin' name='gl_MaxVaryingVectors'/>
        <Keyword style_name='builtin' name='gl_MaxVertexImageUniforms'/>
        <Keyword style_name='builtin' name='gl_MaxVertexAtomicCounters'/>
        <Keyword style_name='builtin' name='gl_MaxVertexAtomicCounterBuffers'/>
        <Keyword style_name='builtin' name='gl_MaxTessControlImageUniforms'/>
        <Keyword style_name='builtin' name='gl_MaxTessControlAtomicCounters'/>
        <Keyword style_name='builtin' name='gl_MaxTessControlAtomicCounterBuffers'/>
        <Keyword style_name='builtin' name='gl_MaxTessEvaluationImageUniforms'/>
        <Keyword style_name='builtin' name='gl_MaxTessEvaluationAtomicCounters'/>
        <Keyword style_name='builtin' name='gl_MaxTessEvaluationAtomicCounterBuffers'/>
        <Keyword style_name='builtin' name='gl_MaxGeometryImageUniforms'/>
        <Keyword style_name='builtin' name='gl_MaxGeometryAtomicCounters'/>
        <Keyword style_name='builtin' name='gl_MaxGeometryAtomicCounterBuffers'/>
        <Keyword style_name='builtin' name='gl_MaxFragmentImageUniforms'/>
        <Keyword style_name='builtin' name='gl_MaxFragmentAtomicCounters'/>
        <Keyword style_name='builtin' name='gl_MaxFragmentAtomicCounterBuffers'/>
        <Keyword style_name='builtin' name='gl_MaxCombinedImageUniforms'/>
        <Keyword style_name='builtin' name='gl_MaxCombinedAtomicCounters'/>
        <Keyword style_name='builtin' name='gl_MaxCombinedAtomicCounterBuffers'/>
        <Keyword style_name='builtin' name='gl_MaxImageUnits'/>
        <Keyword style_name='builtin' name='gl_MaxCombinedImageUnitsAndFragmentOutputs'/>
        <Keyword style_name='builtin' name='gl_MaxImageSamples'/>
        <Keyword style_name='builtin' name='gl_MaxAtomicCounterBindings'/>
        <Keyword style_name='builtin' name='gl_MaxAtomicCounterBufferSize'/>
        <Keyword style_name='builtin' name='gl_MinProgramTexelOffset'/>
        <Keyword style_name='builtin' name='gl_MaxProgramTexelOffset'/>
        <Keyword style_name='builtin' name='gl_MaxComputeWorkGroupCount'/>
        <Keyword style_name='builtin' name='gl_MaxComputeWorkGroupSize'/>
        <Keyword style_name='builtin' name='gl_MaxComputeUniformComponents'/>
        <Keyword style_name='builtin' name='gl_MaxComputeTextureImageUnits'/>
        <Keyword style_name='builtin' name='gl_MaxComputeImageUniforms'/>
        <Keyword style_name='builtin' name='gl_MaxComputeAtomicCounters​'/>
        <Keyword style_name='builtin' name='gl_MaxComputeAtomicCounterBuffers​'/>
        <Keyword style_name='builtin' name='gl_MaxTransformFeedbackBuffers​'/>
        <Keyword style_name='builtin' name='gl_MaxTransformFeedbackInterleavedComponents​'/>
      </Lexer>
      <Lexer type='functionheader' lexer='GlslFunctionArgLexer'>
        <Style theme='DarkTheme' name='datatype' fore='#7AC0F4'/>
        <Style theme='DarkTheme' name='special' fore='#D57C30'/>
        <Style theme='LightTheme' name='datatype' fore='#7AC0F4'/>
        <Style theme='LightTheme' name='special' fore='#D57C30'/>
        <Keyword style_name='special' name='global' hint='Get the value of a global object variable before compiling the shader.
                                                         \  &lt;key&gt;global&lt;/key&gt;.name.variable'/>
        <Keyword style_name='datatype' name='void'/>
        <Keyword style_name='datatype' name='bool'/>
        <Keyword style_name='datatype' name='int'/>
        <Keyword style_name='datatype' name='uint'/>
        <Keyword style_name='datatype' name='float'/>
        <Keyword style_name='datatype' name='atomic_uint'/>
        <Keyword style_name='datatype' name='bvec2' hint='bool vector with 2 components'/>
        <Keyword style_name='datatype' name='bvec3' hint='bool vector with 3 components'/>
        <Keyword style_name='datatype' name='bvec4' hint='bool vector with 4 components'/>
        <Keyword style_name='datatype' name='ivec2' hint='int vector with 2 components'/>
        <Keyword style_name='datatype' name='ivec3' hint='int vector with 3 components'/>
        <Keyword style_name='datatype' name='ivec4' hint='int vector with 4 components'/>
        <Keyword style_name='datatype' name='uvec2' hint='unsigned int vector with 2 components'/>
        <Keyword style_name='datatype' name='uvec3' hint='unsigned int vector with 3 components'/>
        <Keyword style_name='datatype' name='uvec4' hint='unsigned int vector with 4 components'/>
        <Keyword style_name='datatype' name='vec2' hint='float vector with 2 components'/>
        <Keyword style_name='datatype' name='vec3' hint='float vector with 3 components'/>
        <Keyword style_name='datatype' name='vec4' hint='float vector with 4 components'/>
        <Keyword style_name='datatype' name='dvec2' hint='double vector with 2 components'/>
        <Keyword style_name='datatype' name='dvec3' hint='double vector with 3 components'/>
        <Keyword style_name='datatype' name='dvec4' hint='double vector with 4 components'/>
        <Keyword style_name='datatype' name='mat2' hint='float matrix with 2 columns and 2 rows'/>
        <Keyword style_name='datatype' name='mat2x2' hint='float matrix with 2 columns and 2 rows'/>
        <Keyword style_name='datatype' name='mat2x3' hint='float matrix with 2 columns and 3 rows'/>
        <Keyword style_name='datatype' name='mat2x4' hint='float matrix with 2 columns and 4 rows'/>
        <Keyword style_name='datatype' name='mat3' hint='float matrix with 3 columns and 3 rows'/>
        <Keyword style_name='datatype' name='mat3x2' hint='float matrix with 3 columns and 2 rows'/>
        <Keyword style_name='datatype' name='mat3x3' hint='float matrix with 3 columns and 3 rows'/>
        <Keyword style_name='datatype' name='mat3x4' hint='float matrix with 3 columns and 4 rows'/>
        <Keyword style_name='datatype' name='mat4' hint='float matrix with 4 columns and 4 rows'/>
        <Keyword style_name='datatype' name='mat4x2' hint='float matrix with 4 columns and 2 rows'/>
        <Keyword style_name='datatype' name='mat4x3' hint='float matrix with 4 columns and 3 rows'/>
        <Keyword style_name='datatype' name='mat4x4' hint='float matrix with 4 columns and 4 rows'/>
        <Keyword style_name='datatype' name='dmat2' hint='double matrix with 2 columns and 2 rows'/>
        <Keyword style_name='datatype' name='dmat2x2' hint='double matrix with 2 columns and 2 rows'/>
        <Keyword style_name='datatype' name='dmat2x3' hint='double matrix with 2 columns and 3 rows'/>
        <Keyword style_name='datatype' name='dmat2x4' hint='double matrix with 2 columns and 4 rows'/>
        <Keyword style_name='datatype' name='dmat3' hint='double matrix with 3 columns and 3 rows'/>
        <Keyword style_name='datatype' name='dmat3x2' hint='double matrix with 3 columns and 2 rows'/>
        <Keyword style_name='datatype' name='dmat3x3' hint='double matrix with 3 columns and 3 rows'/>
        <Keyword style_name='datatype' name='dmat3x4' hint='double matrix with 3 columns and 4 rows'/>
        <Keyword style_name='datatype' name='dmat4' hint='double matrix with 4 columns and 4 rows'/>
        <Keyword style_name='datatype' name='dmat4x2' hint='double matrix with 4 columns and 2 rows'/>
        <Keyword style_name='datatype' name='dmat4x3' hint='double matrix with 4 columns and 3 rows'/>
        <Keyword style_name='datatype' name='dmat4x4' hint='double matrix with 4 columns and 4 rows'/>
      </Lexer>
    </Lexer>
  </Lexer>
</FxLexer>