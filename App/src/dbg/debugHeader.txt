
#define DEBUG_TYPE_FLOAT 1
#define DEBUG_TYPE_INT 2
#define DEBUG_TYPE_UINT 3

uniform int debugVertInputIndex;
uniform int debugContInputIndex;
uniform int debugEvalInputIndex;
uniform int debugGeomInputIndex;
uniform ivec2 debugFragInputIndex;
uniform int debugCompInputIndex;
layout(rgba32f) uniform writeonly imageBuffer debugBuffer;

void debugStore(inout int i, vec4 val) {
	imageStore(debugBuffer, i++, val);
}
void debugStore(inout int i, ivec4 val) {
	debugStore(i, vec4(intBitsToFloat(val.x), intBitsToFloat(val.y), intBitsToFloat(val.z), intBitsToFloat(val.w)));
}
void debugStore(inout int i, uvec4 val) {
	debugStore(i, vec4(uintBitsToFloat(val.x), uintBitsToFloat(val.y), uintBitsToFloat(val.z), uintBitsToFloat(val.w)));
}

void storeDebugType(inout int i, int type, int cols, int rows) {
	debugStore(i, ivec4(type, cols, rows, 0));
}

// FLOAT
void storeDebugVar(inout int i, float val) {
	storeDebugType(i, DEBUG_TYPE_FLOAT, 1, 1);
	debugStore(i, vec4(val, 0, 0, 0));
}

void storeDebugVar(inout int i, vec2 val) {
	storeDebugType(i, DEBUG_TYPE_FLOAT, 1, 2);
	debugStore(i, vec4(val, 0, 0));
}
void storeDebugVar(inout int i, vec3 val) {
	storeDebugType(i, DEBUG_TYPE_FLOAT, 1, 3);
	debugStore(i, vec4(val, 0));
}
void storeDebugVar(inout int i, vec4 val) {
	storeDebugType(i, DEBUG_TYPE_FLOAT, 1, 4);
	debugStore(i, val);
}

void storeDebugVar(inout int i, mat2 val) {
	debugStore(i, DEBUG_TYPE_FLOAT, 2, 2);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
}
void storeDebugVar(inout int i, mat2x3 val) {
	debugStore(i, DEBUG_TYPE_FLOAT, 2, 3);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
}
void storeDebugVar(inout int i, mat2x4 val) {
	debugStore(i, DEBUG_TYPE_FLOAT, 2, 4);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
}

void storeDebugVar(inout int i, mat3 val) {
	debugStore(i, DEBUG_TYPE_FLOAT, 3, 3);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
}
void storeDebugVar(inout int i, mat3x2 val) {
	debugStore(i, DEBUG_TYPE_FLOAT, 3, 2);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
}
void storeDebugVar(inout int i, mat3x4 val) {
	debugStore(i, DEBUG_TYPE_FLOAT, 3, 4);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
}

void storeDebugVar(inout int i, mat4 val) {
	debugStore(i, DEBUG_TYPE_FLOAT, 4, 4);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
	debugStore(i, val[3]);
}
void storeDebugVar(inout int i, mat4x2 val) {
	debugStore(i, DEBUG_TYPE_FLOAT, 4, 2);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
	debugStore(i, val[3]);
}
void storeDebugVar(inout int i, mat4x3 val) {
	debugStore(i, DEBUG_TYPE_FLOAT, 4, 3);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
	debugStore(i, val[3]);
}

// INT
void storeDebugVar(inout int i, int val) {
	storeDebugType(i, DEBUG_TYPE_INT, 1, 1);
	debugStore(i, vec4(val, 0, 0, 0));
}

void storeDebugVar(inout int i, ivec2 val) {
	storeDebugType(i, DEBUG_TYPE_INT, 1, 2);
	debugStore(i, ivec4(val, 0, 0));
}
void storeDebugVar(inout int i, ivec3 val) {
	storeDebugType(i, DEBUG_TYPE_INT, 1, 3);
	debugStore(i, ivec4(val, 0));
}
void storeDebugVar(inout int i, ivec4 val) {
	storeDebugType(i, DEBUG_TYPE_INT, 1, 4);
	debugStore(i, val);
}

void storeDebugVar(inout int i, imat2 val) {
	debugStore(i, DEBUG_TYPE_INT, 2, 2);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
}
void storeDebugVar(inout int i, imat2x3 val) {
	debugStore(i, DEBUG_TYPE_INT, 2, 3);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
}
void storeDebugVar(inout int i, imat2x4 val) {
	debugStore(i, DEBUG_TYPE_INT, 2, 4);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
}

void storeDebugVar(inout int i, imat3 val) {
	debugStore(i, DEBUG_TYPE_INT, 3, 3);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
}
void storeDebugVar(inout int i, imat3x2 val) {
	debugStore(i, DEBUG_TYPE_INT, 3, 2);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
}
void storeDebugVar(inout int i, imat3x4 val) {
	debugStore(i, DEBUG_TYPE_INT, 3, 4);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
}

void storeDebugVar(inout int i, imat4 val) {
	debugStore(i, DEBUG_TYPE_INT, 4, 4);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
	debugStore(i, val[3]);
}
void storeDebugVar(inout int i, imat4x2 val) {
	debugStore(i, DEBUG_TYPE_INT, 4, 2);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
	debugStore(i, val[3]);
}
void storeDebugVar(inout int i, imat4x3 val) {
	debugStore(i, DEBUG_TYPE_INT, 4, 3);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
	debugStore(i, val[3]);
}

// UINT
void storeDebugVar(inout int i, uint val) {
	storeDebugType(i, DEBUG_TYPE_UINT, 1, 1);
	debugStore(i, vec4(val, 0, 0, 0));
}

void storeDebugVar(inout int i, uvec2 val) {
	storeDebugType(i, DEBUG_TYPE_UINT, 1, 2);
	debugStore(i, ivec4(val, 0, 0));
}
void storeDebugVar(inout int i, uvec3 val) {
	storeDebugType(i, DEBUG_TYPE_UINT, 1, 3);
	debugStore(i, ivec4(val, 0));
}
void storeDebugVar(inout int i, uvec4 val) {
	storeDebugType(i, DEBUG_TYPE_UINT, 1, 4);
	debugStore(i, val);
}

void storeDebugVar(inout int i, umat2 val) {
	debugStore(i, DEBUG_TYPE_UINT, 2, 2);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
}
void storeDebugVar(inout int i, umat2x3 val) {
	debugStore(i, DEBUG_TYPE_UINT, 2, 3);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
}
void storeDebugVar(inout int i, umat2x4 val) {
	debugStore(i, DEBUG_TYPE_UINT, 2, 4);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
}

void storeDebugVar(inout int i, umat3 val) {
	debugStore(i, DEBUG_TYPE_UINT, 3, 3);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
}
void storeDebugVar(inout int i, umat3x2 val) {
	debugStore(i, DEBUG_TYPE_UINT, 3, 2);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
}
void storeDebugVar(inout int i, umat3x4 val) {
	debugStore(i, DEBUG_TYPE_UINT, 3, 4);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
}

void storeDebugVar(inout int i, umat4 val) {
	debugStore(i, DEBUG_TYPE_UINT, 4, 4);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
	debugStore(i, val[3]);
}
void storeDebugVar(inout int i, umat4x2 val) {
	debugStore(i, DEBUG_TYPE_UINT, 4, 2);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
	debugStore(i, val[3]);
}
void storeDebugVar(inout int i, umat4x3 val) {
	debugStore(i, DEBUG_TYPE_UINT, 4, 3);
	debugStore(i, val[0]);
	debugStore(i, val[1]);
	debugStore(i, val[2]);
	debugStore(i, val[3]);
}


// vertex shader debug command
//if (debugVertexInputIndex == gl_VertexID) {
//	// store variables
//}