// IMPORTANT: THIS IS MACHINE-GENERATED CODE
// PLEASE DO NOT EDIT
// Generated by Stateless Designer
// http://statelessdesigner.codeplex.com/

using Stateless;

namespace UnitTests
{
  public class StateMachine1
  {
    public delegate void UnhandledTriggerDelegate(State state, Trigger trigger);
    public delegate void EntryExitDelegate();
    public delegate bool GuardClauseDelegate();

    public enum Trigger
    {
      foo,
      slash,
      asterix,
      space,
      blank,
      newline,
      num,
      letter,
      exit,
      openBrace3,
      closeBrace3,
    }

    public enum State
    {
      Default,
      PotentialStartComment,
      PotentialStopComment,
      LineComment,
      BlockComment,
      Preprocessor,
      ObjectType,
      Annotation,
      PotentialAnnotation,
      InnerState,
    }

    private readonly StateMachine<State, Trigger> stateMachine = null;

    public EntryExitDelegate OnDefaultEntry = null;
    public EntryExitDelegate OnDefaultExit = null;
    public EntryExitDelegate OnPotentialStartCommentEntry = null;
    public EntryExitDelegate OnPotentialStartCommentExit = null;
    public EntryExitDelegate OnPotentialStopCommentEntry = null;
    public EntryExitDelegate OnPotentialStopCommentExit = null;
    public EntryExitDelegate OnLineCommentEntry = null;
    public EntryExitDelegate OnLineCommentExit = null;
    public EntryExitDelegate OnBlockCommentEntry = null;
    public EntryExitDelegate OnBlockCommentExit = null;
    public EntryExitDelegate OnPreprocessorEntry = null;
    public EntryExitDelegate OnPreprocessorExit = null;
    public EntryExitDelegate OnObjectTypeEntry = null;
    public EntryExitDelegate OnObjectTypeExit = null;
    public EntryExitDelegate OnAnnotationEntry = null;
    public EntryExitDelegate OnAnnotationExit = null;
    public EntryExitDelegate OnPotentialAnnotationEntry = null;
    public EntryExitDelegate OnPotentialAnnotationExit = null;
    public EntryExitDelegate OnInnerStateEntry = null;
    public EntryExitDelegate OnInnerStateExit = null;
    public GuardClauseDelegate GuardClauseFromDefaultToDefaultUsingTriggerblank = null;
    public GuardClauseDelegate GuardClauseFromDefaultToPotentialStartCommentUsingTriggerslash = null;
    public GuardClauseDelegate GuardClauseFromDefaultToPreprocessorUsingTriggernum = null;
    public GuardClauseDelegate GuardClauseFromDefaultToObjectTypeUsingTriggerletter = null;
    public GuardClauseDelegate GuardClauseFromDefaultToAnnotationUsingTriggerletter = null;
    public GuardClauseDelegate GuardClauseFromDefaultToInnerStateUsingTriggeropenBrace3 = null;
    public GuardClauseDelegate GuardClauseFromPotentialStartCommentToDefaultUsingTriggerspace = null;
    public GuardClauseDelegate GuardClauseFromPotentialStartCommentToLineCommentUsingTriggerslash = null;
    public GuardClauseDelegate GuardClauseFromPotentialStartCommentToBlockCommentUsingTriggerasterix = null;
    public GuardClauseDelegate GuardClauseFromPotentialStopCommentToDefaultUsingTriggerslash = null;
    public GuardClauseDelegate GuardClauseFromLineCommentToDefaultUsingTriggernewline = null;
    public GuardClauseDelegate GuardClauseFromBlockCommentToPotentialStopCommentUsingTriggerasterix = null;
    public GuardClauseDelegate GuardClauseFromPreprocessorToDefaultUsingTriggerblank = null;
    public GuardClauseDelegate GuardClauseFromPreprocessorToPreprocessorUsingTriggerletter = null;
    public GuardClauseDelegate GuardClauseFromObjectTypeToObjectTypeUsingTriggerletter = null;
    public GuardClauseDelegate GuardClauseFromObjectTypeToDefaultUsingTriggerblank = null;
    public GuardClauseDelegate GuardClauseFromAnnotationToAnnotationUsingTriggerletter = null;
    public GuardClauseDelegate GuardClauseFromAnnotationToDefaultUsingTriggerblank = null;
    public GuardClauseDelegate GuardClauseFromInnerStateToDefaultUsingTriggercloseBrace3 = null;
    public UnhandledTriggerDelegate OnUnhandledTrigger = null;

    public StateMachine1()
    {
      stateMachine = new StateMachine<State, Trigger>(State.Default);
      stateMachine.Configure(State.Default)
        .OnEntry(() => { if (OnDefaultEntry != null) OnDefaultEntry(); })
        .OnExit(() => { if (OnDefaultExit != null) OnDefaultExit(); })
        .PermitReentryIf(Trigger.blank , () => { if (GuardClauseFromDefaultToDefaultUsingTriggerblank != null) return GuardClauseFromDefaultToDefaultUsingTriggerblank(); return true; } )
        .PermitIf(Trigger.slash, State.PotentialStartComment , () => { if (GuardClauseFromDefaultToPotentialStartCommentUsingTriggerslash != null) return GuardClauseFromDefaultToPotentialStartCommentUsingTriggerslash(); return true; } )
        .PermitIf(Trigger.num, State.Preprocessor , () => { if (GuardClauseFromDefaultToPreprocessorUsingTriggernum != null) return GuardClauseFromDefaultToPreprocessorUsingTriggernum(); return true; } )
        .PermitIf(Trigger.letter, State.ObjectType , () => { if (GuardClauseFromDefaultToObjectTypeUsingTriggerletter != null) return GuardClauseFromDefaultToObjectTypeUsingTriggerletter(); return true; } )
        .PermitIf(Trigger.letter, State.Annotation , () => { if (GuardClauseFromDefaultToAnnotationUsingTriggerletter != null) return GuardClauseFromDefaultToAnnotationUsingTriggerletter(); return true; } )
        .PermitIf(Trigger.openBrace3, State.InnerState , () => { if (GuardClauseFromDefaultToInnerStateUsingTriggeropenBrace3 != null) return GuardClauseFromDefaultToInnerStateUsingTriggeropenBrace3(); return true; } )
      ;
      stateMachine.Configure(State.PotentialStartComment)
        .OnEntry(() => { if (OnPotentialStartCommentEntry != null) OnPotentialStartCommentEntry(); })
        .OnExit(() => { if (OnPotentialStartCommentExit != null) OnPotentialStartCommentExit(); })
        .PermitIf(Trigger.space, State.Default , () => { if (GuardClauseFromPotentialStartCommentToDefaultUsingTriggerspace != null) return GuardClauseFromPotentialStartCommentToDefaultUsingTriggerspace(); return true; } )
        .PermitIf(Trigger.slash, State.LineComment , () => { if (GuardClauseFromPotentialStartCommentToLineCommentUsingTriggerslash != null) return GuardClauseFromPotentialStartCommentToLineCommentUsingTriggerslash(); return true; } )
        .PermitIf(Trigger.asterix, State.BlockComment , () => { if (GuardClauseFromPotentialStartCommentToBlockCommentUsingTriggerasterix != null) return GuardClauseFromPotentialStartCommentToBlockCommentUsingTriggerasterix(); return true; } )
      ;
      stateMachine.Configure(State.PotentialStopComment)
        .OnEntry(() => { if (OnPotentialStopCommentEntry != null) OnPotentialStopCommentEntry(); })
        .OnExit(() => { if (OnPotentialStopCommentExit != null) OnPotentialStopCommentExit(); })
        .PermitIf(Trigger.slash, State.Default , () => { if (GuardClauseFromPotentialStopCommentToDefaultUsingTriggerslash != null) return GuardClauseFromPotentialStopCommentToDefaultUsingTriggerslash(); return true; } )
      ;
      stateMachine.Configure(State.LineComment)
        .OnEntry(() => { if (OnLineCommentEntry != null) OnLineCommentEntry(); })
        .OnExit(() => { if (OnLineCommentExit != null) OnLineCommentExit(); })
        .PermitIf(Trigger.newline, State.Default , () => { if (GuardClauseFromLineCommentToDefaultUsingTriggernewline != null) return GuardClauseFromLineCommentToDefaultUsingTriggernewline(); return true; } )
      ;
      stateMachine.Configure(State.BlockComment)
        .OnEntry(() => { if (OnBlockCommentEntry != null) OnBlockCommentEntry(); })
        .OnExit(() => { if (OnBlockCommentExit != null) OnBlockCommentExit(); })
        .PermitIf(Trigger.asterix, State.PotentialStopComment , () => { if (GuardClauseFromBlockCommentToPotentialStopCommentUsingTriggerasterix != null) return GuardClauseFromBlockCommentToPotentialStopCommentUsingTriggerasterix(); return true; } )
      ;
      stateMachine.Configure(State.Preprocessor)
        .OnEntry(() => { if (OnPreprocessorEntry != null) OnPreprocessorEntry(); })
        .OnExit(() => { if (OnPreprocessorExit != null) OnPreprocessorExit(); })
        .PermitIf(Trigger.blank, State.Default , () => { if (GuardClauseFromPreprocessorToDefaultUsingTriggerblank != null) return GuardClauseFromPreprocessorToDefaultUsingTriggerblank(); return true; } )
        .PermitReentryIf(Trigger.letter , () => { if (GuardClauseFromPreprocessorToPreprocessorUsingTriggerletter != null) return GuardClauseFromPreprocessorToPreprocessorUsingTriggerletter(); return true; } )
      ;
      stateMachine.Configure(State.ObjectType)
        .OnEntry(() => { if (OnObjectTypeEntry != null) OnObjectTypeEntry(); })
        .OnExit(() => { if (OnObjectTypeExit != null) OnObjectTypeExit(); })
        .PermitReentryIf(Trigger.letter , () => { if (GuardClauseFromObjectTypeToObjectTypeUsingTriggerletter != null) return GuardClauseFromObjectTypeToObjectTypeUsingTriggerletter(); return true; } )
        .PermitIf(Trigger.blank, State.Default , () => { if (GuardClauseFromObjectTypeToDefaultUsingTriggerblank != null) return GuardClauseFromObjectTypeToDefaultUsingTriggerblank(); return true; } )
      ;
      stateMachine.Configure(State.Annotation)
        .OnEntry(() => { if (OnAnnotationEntry != null) OnAnnotationEntry(); })
        .OnExit(() => { if (OnAnnotationExit != null) OnAnnotationExit(); })
        .PermitReentryIf(Trigger.letter , () => { if (GuardClauseFromAnnotationToAnnotationUsingTriggerletter != null) return GuardClauseFromAnnotationToAnnotationUsingTriggerletter(); return true; } )
        .PermitIf(Trigger.blank, State.Default , () => { if (GuardClauseFromAnnotationToDefaultUsingTriggerblank != null) return GuardClauseFromAnnotationToDefaultUsingTriggerblank(); return true; } )
      ;
      stateMachine.Configure(State.PotentialAnnotation)
        .OnEntry(() => { if (OnPotentialAnnotationEntry != null) OnPotentialAnnotationEntry(); })
        .OnExit(() => { if (OnPotentialAnnotationExit != null) OnPotentialAnnotationExit(); })
      ;
      stateMachine.Configure(State.InnerState)
        .OnEntry(() => { if (OnInnerStateEntry != null) OnInnerStateEntry(); })
        .OnExit(() => { if (OnInnerStateExit != null) OnInnerStateExit(); })
        .PermitIf(Trigger.closeBrace3, State.Default , () => { if (GuardClauseFromInnerStateToDefaultUsingTriggercloseBrace3 != null) return GuardClauseFromInnerStateToDefaultUsingTriggercloseBrace3(); return true; } )
      ;
      stateMachine.OnUnhandledTrigger((state, trigger) => { if (OnUnhandledTrigger != null) OnUnhandledTrigger(state, trigger); });
    }

    public bool TryFireTrigger(Trigger trigger)
    {
      if (!stateMachine.CanFire(trigger))
      {
        return false;
      }
      stateMachine.Fire(trigger);
      return true;
    }

    public State GetState
    {
      get
      {
        return stateMachine.State;
      }
    }
  }
}